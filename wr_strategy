


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This program is for looking at WR groups in the nfl, to see if it is "better" to sign one high
priced FA WR or a couple lower priced ones.

v3 adds weighted average grades for rb, fb, and ol
v4 adds grade counts for rb, fb, and ol

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the actual and model pct of cap values for each player season.

OUTPUT TABLES:
#temp_pct_of_cap

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_pct_of_cap exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_pct_of_cap') IS NOT NULL
	DROP TABLE #temp_pct_of_cap
	
	SELECT nfl_player_id
		,season
		,model
		,salaries
		,[value]
		,[source]
		,signing_type
		,sign_date
	INTO #temp_pct_of_cap
	FROM [AnalyticsWork].[dbo].[rd2_salaries_for_modeling]
	WHERE report_week = 17 
		AND report_season = 2017


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board grade. Take a players draft
board grade from as late in the process as available. You discount this by one
grade level for rookies.

OUTPUT TABLES:
#temp_draft_board_grades_latest

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades') IS NOT NULL
	DROP TABLE #temp_draft_board_grades

	SELECT player_id AS bane_player_id
		,legacy_grade
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			ELSE NULL
		END AS order_by
	INTO #temp_draft_board_grades
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE legacy_grade != '' AND legacy_grade IS NOT NULL
		AND player_id <> 64668


-- Check if #temp_draft_board_grades_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_with_order

	SELECT bane_player_id
		,legacy_grade
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_grade_order
	INTO #temp_draft_board_grades_with_order
	FROM #temp_draft_board_grades

/*
SELECT *
FROM #temp_draft_board_grades_with_order
*/

-- Check if #temp_draft_board_grades_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_latest

	SELECT bane_player_id
		,CASE WHEN legacy_grade = 6.8 THEN 6.7 ELSE legacy_grade END AS legacy_grade
	INTO #temp_draft_board_grades_latest
	FROM #temp_draft_board_grades_with_order
	WHERE draft_board_grade_order = 1

/*
SELECT *
FROM #temp_draft_board_grades_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions') IS NOT NULL
	DROP TABLE #temp_draft_board_positions

	SELECT player_id AS bane_player_id
		,position
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			ELSE NULL
	END AS order_by
	INTO #temp_draft_board_positions
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE position != '' AND position IS NOT NULL
		AND player_id <> 64668
		AND draft_year < 2018


-- Check if #temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_with_order

	SELECT bane_player_id
		,position
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_position_order
	INTO #temp_draft_board_positions_with_order
	FROM #temp_draft_board_positions

/*
SELECT *
FROM #temp_draft_board_positions_with_order
*/

-- Check if #temp_draft_board_positions_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_latest

	SELECT bane_player_id
		,CASE WHEN position IN ('WO','WR') THEN 'WR'
			WHEN position IN ('RUSH','SAM','DP','OB') THEN 'OB'
			WHEN position IN ('OH','RB') THEN 'RB'
			WHEN position IN ('FS','SS') THEN 'DS'
			ELSE position
		END AS position
	INTO #temp_draft_board_positions_latest
	FROM #temp_draft_board_positions_with_order
	WHERE draft_board_position_order = 1

/*
SELECT distinct position
FROM #temp_draft_board_positions_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join first year pro grade to draft board grade so you can find expected pro grade in 
first season based on board grade and position.

OUTPUT TABLES:
#temp_draft_board_and_pro

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_and_pro exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_and_pro') IS NOT NULL
	DROP TABLE #temp_draft_board_and_pro

	SELECT db.bane_player_id
		,dp.position
		,legacy_grade
		,CASE WHEN pg.grade_value IS NULL OR pg.grade_value <= 47 THEN 47 ELSE pg.grade_value END AS pro_grade
	INTO #temp_draft_board_and_pro
	FROM #temp_draft_board_grades_latest db
	LEFT JOIN #temp_draft_board_positions_latest dp
		ON db.bane_player_id = dp.bane_player_id
	LEFT JOIN Analytics.dbo.analysis_players_pro_grades pg
		ON db.bane_player_id = pg.bane_player_id
		AND pg.player_season_in_league = 1


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the average rookie year pro grade by board grade and position.

OUTPUT TABLES:
#temp_rookie_expected_grade

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_rookie_expected_grade exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_rookie_expected_grade') IS NOT NULL
	DROP TABLE #temp_rookie_expected_grade

	SELECT position
		,legacy_grade
		,AVG(pro_grade) AS expected_pro_grade_value
		,CASE WHEN AVG(pro_grade) >= 93.5 THEN 8.0
			WHEN AVG(pro_grade) >= 78.5 THEN 7.0
			WHEN AVG(pro_grade) >= 69 THEN 6.9 
			WHEN AVG(pro_grade) >= 62 THEN 6.3
			WHEN AVG(pro_grade) >= 55 THEN 6.0 
			WHEN AVG(pro_grade) >= 51.5 THEN 5.9
			WHEN AVG(pro_grade) >= 48.5 THEN 5.8
			WHEN AVG(pro_grade) >= 46.5 THEN 5.7
			WHEN AVG(pro_grade) >= 45.5 THEN 5.6
			WHEN AVG(pro_grade) >= 44.5 THEN 5.4
			WHEN AVG(pro_grade) >= 43.5 THEN 5.2
			WHEN AVG(pro_grade) IS NOT NULL THEN 5.0
			ELSE 2.0
		END AS expected_pro_grade_bucket  
	INTO #temp_rookie_expected_grade
	FROM #temp_draft_board_and_pro
	GROUP BY position
		,legacy_grade


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join board grade, position, and expected pro grade into one table.

OUTPUT TABLES:
#temp_player_expected_grade

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_expected_grade exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_expected_grade') IS NOT NULL
	DROP TABLE #temp_player_expected_grade

	SELECT bane_player_id
		,db.position
		,db.legacy_grade
		,xg.expected_pro_grade_value
		,xg.expected_pro_grade_bucket  
	INTO #temp_player_expected_grade
	FROM #temp_draft_board_and_pro db
	LEFT JOIN #temp_rookie_expected_grade xg
		ON db.legacy_grade = xg.legacy_grade
		AND db.position = xg.position


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join a player's season grade to every play he had for a season.  Then you can sum
up snaps by position played for every team and position.

OUTPUT TABLES:
#temp_players_snaps_with_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_players_snaps_with_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_players_snaps_with_grades') IS NOT NULL
	DROP TABLE #temp_players_snaps_with_grades

	SELECT oa.nfl_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,CASE WHEN position_blt IN ('LT','LG','OC','RG','RT') THEN 'OL'
			ELSE position_blt
		END AS position_blt
		,oa.pff_play_id
		,an.season
		,cl.nfl_club_id
		,CASE WHEN oa.team = 'SD' THEN 'LAC' WHEN oa.team = 'SL' THEN 'LA' ELSE oa.team END AS club
		,CASE WHEN pl.nfl_entry_year = an.season THEN CASE WHEN expected_pro_grade_bucket < 5.7  THEN 5.7 ELSE ISNULL(expected_pro_grade_bucket,5.7) END	
			WHEN pgp.grade_bucket IS NULL THEN CASE WHEN pgp2.grade_bucket < 5.7 THEN 5.7 ELSE ISNULL(pgp2.grade_bucket,5.7) END 
			ELSE CASE WHEN pgp.grade_bucket < 5.7 THEN 5.7 ELSE ISNULL(pgp.grade_bucket,5.7) END
		END AS pro_grade_previous
		,CASE WHEN pgc.grade_bucket < 5.7 THEN 5.7
			ELSE ISNULL(pgc.grade_bucket,5.7)
		END AS pro_grade_current
	INTO #temp_players_snaps_with_grades
	FROM Analytics.dbo.stage_plays_player_offensive_alignment oa
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON oa.pff_play_id = an.pff_play_id
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON oa.nfl_player_id = pl.nfl_id	
		AND pl.is_deleted = 0
	LEFT JOIN Analytics.dbo.analysis_players_pro_grades	pgp
		ON oa.nfl_player_id = pgp.nfl_player_id
		AND an.season = pgp.report_season + 1
	LEFT JOIN Analytics.dbo.analysis_players_pro_grades	pgc
		ON oa.nfl_player_id = pgc.nfl_player_id
		AND an.season = pgc.report_season
	LEFT JOIN Analytics.dbo.analysis_players_pro_grades	pgp2
		ON oa.nfl_player_id = pgp2.nfl_player_id
		AND an.season = pgp2.report_season + 2
	LEFT JOIN #temp_player_expected_grade db
		ON pl.id = db.bane_player_id
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON CASE WHEN oa.team = 'SD' THEN 'LAC' WHEN oa.team = 'SL' THEN 'LA' ELSE oa.team END = cl.code
	WHERE season >= 2012
		AND season_type_adjusted = 'REGPOST'


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join a player's season grade to every play he had for a season.  Then you can sum
up snaps by position played for every team and position.

OUTPUT TABLES:
#temp_players_snaps_with_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_players_snaps_with_values exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_players_snaps_with_values') IS NOT NULL
	DROP TABLE #temp_players_snaps_with_values

	SELECT *
		,CASE WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (8.0) THEN 100
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (7.0) THEN 92
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (6.9) THEN 82
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (6.7,6.5) THEN 71
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (6.4,6.3,6.2) THEN 64
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.9) THEN 53.5
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.8) THEN 50
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.7) THEN 47
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.6) THEN 45.5
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.4) THEN 43
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.2) THEN 41
			WHEN CAST(pro_grade_previous AS NUMERIC (3,1)) IN (5.0) THEN 40
			ELSE NULL
		END AS pro_grade_previous_value 	
		,CASE WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (8.0) THEN 100
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (7.0) THEN 92
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (6.9) THEN 82
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (6.7,6.5) THEN 71
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (6.4,6.3,6.2) THEN 64
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.9) THEN 53.5
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.8) THEN 50
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.7) THEN 47
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.6) THEN 45.5
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.4) THEN 43
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.2) THEN 41
			WHEN CAST(pro_grade_current AS NUMERIC (3,1)) IN (5.0) THEN 40
			ELSE NULL
		END AS pro_grade_current_value  
	INTO #temp_players_snaps_with_values
	FROM #temp_players_snaps_with_grades


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the grade weighted average value for every team, player, position, season.

OUTPUT TABLES:
#temp_weighted_average_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_weighted_average_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_weighted_average_grades') IS NOT NULL
	DROP TABLE #temp_weighted_average_grades

	SELECT club
		,nfl_club_id
		,season
		,position_blt
		,AVG(pro_grade_current_value) AS current_snap_grade_avg
		,AVG(pro_grade_previous_value) AS previous_snap_grade_avg
	INTO #temp_weighted_average_grades
	FROM #temp_players_snaps_with_values ps
	GROUP BY club
		,nfl_club_id
		,season
		,position_blt


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table with one row for every player for each team in a season. Include the grade
so you can use this for grade counts.

OUTPUT TABLES:
#temp_distinct_player_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_distinct_player_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_distinct_player_grades') IS NOT NULL
	DROP TABLE #temp_distinct_player_grades

	SELECT DISTINCT sg.nfl_player_id
		,player
		,poff.position_blt AS position
		,sg.season
		,sg.nfl_club_id
		,sg.club
		,pro_grade_previous
		,pro_grade_current
	INTO #temp_distinct_player_grades
	FROM #temp_players_snaps_with_grades sg
	LEFT JOIN Analytics.dbo.analysis_players_season_position_offense poff
		ON sg.nfl_player_id = poff.nfl_player_id
		AND sg.season = poff.season
		AND poff.season_type_adjusted = 'REGPOST'
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON sg.nfl_player_id = pl.nfl_id
		AND pl.is_deleted = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions po
		ON pl.position_id = po.id
	--WHERE (poff.position_blt IN ('TE','WR') OR translation IN ('TE','WR'))
		--AND translation NOT IN ('OT','OG','OC')


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the grade counts of each team's pass catchers.

OUTPUT TABLES:
#temp_pass_catcher_counts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_pass_catcher_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_pass_catcher_counts') IS NOT NULL
	DROP TABLE #temp_pass_catcher_counts

	SELECT nfl_club_id
		,club
		,season
		,SUM(CASE WHEN pro_grade_previous = 8.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_80_previous_wr
		,SUM(CASE WHEN pro_grade_previous = 7.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_70_previous_wr
		,SUM(CASE WHEN pro_grade_previous IN (6.9) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_69_previous_wr
		,SUM(CASE WHEN pro_grade_previous IN (6.7,6.5) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_67_previous_wr
		,SUM(CASE WHEN pro_grade_previous IN (6.4,6.3,6.2) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_63_previous_wr
		,SUM(CASE WHEN pro_grade_previous IN (6.1,6.0) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_60_previous_wr
		,SUM(CASE WHEN pro_grade_previous IN (5.9) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_59_previous_wr
		,SUM(CASE WHEN pro_grade_previous IN (5.8) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_58_previous_wr
		,SUM(CASE WHEN pro_grade_previous >= 7.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_70up_previous_wr
		,SUM(CASE WHEN pro_grade_previous >= 6.5 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_69up_previous_wr
		,SUM(CASE WHEN pro_grade_previous >= 6.2 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_63up_previous_wr
		,SUM(CASE WHEN pro_grade_previous >= 6.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_60up_previous_wr
		,SUM(CASE WHEN pro_grade_previous >= 5.9 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_59up_previous_wr
		,SUM(CASE WHEN pro_grade_previous >= 5.8 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_58up_previous_wr
		,SUM(CASE WHEN pro_grade_current = 8.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_80_current_wr
		,SUM(CASE WHEN pro_grade_current = 7.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_70_current_wr
		,SUM(CASE WHEN pro_grade_current IN (6.9) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_69_current_wr
		,SUM(CASE WHEN pro_grade_current IN (6.7,6.5) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_67_current_wr
		,SUM(CASE WHEN pro_grade_current IN (6.4,6.3,6.2) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_63_current_wr
		,SUM(CASE WHEN pro_grade_current IN (6.1,6.0) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_60_current_wr
		,SUM(CASE WHEN pro_grade_current IN (5.9) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_59_current_wr
		,SUM(CASE WHEN pro_grade_current IN (5.8) AND position IN ('WR') THEN 1 ELSE 0 END) AS count_58_current_wr
		,SUM(CASE WHEN pro_grade_current >= 7.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_70up_current_wr
		,SUM(CASE WHEN pro_grade_current >= 6.5 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_69up_current_wr
		,SUM(CASE WHEN pro_grade_current >= 6.2 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_63up_current_wr
		,SUM(CASE WHEN pro_grade_current >= 6.0 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_60up_current_wr
		,SUM(CASE WHEN pro_grade_current >= 5.9 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_59up_current_wr
		,SUM(CASE WHEN pro_grade_current >= 5.8 AND position IN ('WR') THEN 1 ELSE 0 END) AS count_58up_current_wr
		,SUM(CASE WHEN pro_grade_previous = 8.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_80_previous_te
		,SUM(CASE WHEN pro_grade_previous = 7.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_70_previous_te
		,SUM(CASE WHEN pro_grade_previous IN (6.9) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_69_previous_te
		,SUM(CASE WHEN pro_grade_previous IN (6.7,6.5) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_67_previous_te
		,SUM(CASE WHEN pro_grade_previous IN (6.4,6.3,6.2) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_63_previous_te
		,SUM(CASE WHEN pro_grade_previous IN (6.1,6.0) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_60_previous_te
		,SUM(CASE WHEN pro_grade_previous IN (5.9) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_59_previous_te
		,SUM(CASE WHEN pro_grade_previous IN (5.8) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_58_previous_te
		,SUM(CASE WHEN pro_grade_previous >= 7.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_70up_previous_te
		,SUM(CASE WHEN pro_grade_previous >= 6.5 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_69up_previous_te
		,SUM(CASE WHEN pro_grade_previous >= 6.2 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_63up_previous_te
		,SUM(CASE WHEN pro_grade_previous >= 6.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_60up_previous_te
		,SUM(CASE WHEN pro_grade_previous >= 5.9 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_59up_previous_te
		,SUM(CASE WHEN pro_grade_previous >= 5.8 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_58up_previous_te
		,SUM(CASE WHEN pro_grade_current = 8.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_80_current_te
		,SUM(CASE WHEN pro_grade_current = 7.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_70_current_te
		,SUM(CASE WHEN pro_grade_current IN (6.9) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_69_current_te
		,SUM(CASE WHEN pro_grade_current IN (6.7,6.5) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_67_current_te
		,SUM(CASE WHEN pro_grade_current IN (6.4,6.3,6.2) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_63_current_te
		,SUM(CASE WHEN pro_grade_current IN (6.1,6.0) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_60_current_te
		,SUM(CASE WHEN pro_grade_current IN (5.9) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_59_current_te
		,SUM(CASE WHEN pro_grade_current IN (5.8) AND position IN ('TE') THEN 1 ELSE 0 END) AS count_58_current_te
		,SUM(CASE WHEN pro_grade_current >= 7.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_70up_current_te
		,SUM(CASE WHEN pro_grade_current >= 6.5 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_69up_current_te
		,SUM(CASE WHEN pro_grade_current >= 6.2 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_63up_current_te
		,SUM(CASE WHEN pro_grade_current >= 6.0 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_60up_current_te
		,SUM(CASE WHEN pro_grade_current >= 5.9 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_59up_current_te
		,SUM(CASE WHEN pro_grade_current >= 5.8 AND position IN ('TE') THEN 1 ELSE 0 END) AS count_58up_current_te

		,SUM(CASE WHEN pro_grade_previous = 8.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_80_previous_qb
		,SUM(CASE WHEN pro_grade_previous = 7.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_70_previous_qb
		,SUM(CASE WHEN pro_grade_previous IN (6.9) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_69_previous_qb
		,SUM(CASE WHEN pro_grade_previous IN (6.7,6.5) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_67_previous_qb
		,SUM(CASE WHEN pro_grade_previous IN (6.4,6.3,6.2) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_63_previous_qb
		,SUM(CASE WHEN pro_grade_previous IN (6.1,6.0) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_60_previous_qb
		,SUM(CASE WHEN pro_grade_previous IN (5.9) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_59_previous_qb
		,SUM(CASE WHEN pro_grade_previous IN (5.8) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_58_previous_qb
		,SUM(CASE WHEN pro_grade_previous >= 7.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_70up_previous_qb
		,SUM(CASE WHEN pro_grade_previous >= 6.5 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_69up_previous_qb
		,SUM(CASE WHEN pro_grade_previous >= 6.2 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_63up_previous_qb
		,SUM(CASE WHEN pro_grade_previous >= 6.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_60up_previous_qb
		,SUM(CASE WHEN pro_grade_previous >= 5.9 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_59up_previous_qb
		,SUM(CASE WHEN pro_grade_previous >= 5.8 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_58up_previous_qb
		,SUM(CASE WHEN pro_grade_current = 8.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_80_current_qb
		,SUM(CASE WHEN pro_grade_current = 7.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_70_current_qb
		,SUM(CASE WHEN pro_grade_current IN (6.9) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_69_current_qb
		,SUM(CASE WHEN pro_grade_current IN (6.7,6.5) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_67_current_qb
		,SUM(CASE WHEN pro_grade_current IN (6.4,6.3,6.2) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_63_current_qb
		,SUM(CASE WHEN pro_grade_current IN (6.1,6.0) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_60_current_qb
		,SUM(CASE WHEN pro_grade_current IN (5.9) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_59_current_qb
		,SUM(CASE WHEN pro_grade_current IN (5.8) AND position IN ('QB') THEN 1 ELSE 0 END) AS count_58_current_qb
		,SUM(CASE WHEN pro_grade_current >= 7.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_70up_current_qb
		,SUM(CASE WHEN pro_grade_current >= 6.5 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_69up_current_qb
		,SUM(CASE WHEN pro_grade_current >= 6.2 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_63up_current_qb
		,SUM(CASE WHEN pro_grade_current >= 6.0 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_60up_current_qb
		,SUM(CASE WHEN pro_grade_current >= 5.9 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_59up_current_qb
		,SUM(CASE WHEN pro_grade_current >= 5.8 AND position IN ('QB') THEN 1 ELSE 0 END) AS count_58up_current_qb

		,SUM(CASE WHEN pro_grade_previous = 8.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_80_previous_fb
		,SUM(CASE WHEN pro_grade_previous = 7.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_70_previous_fb
		,SUM(CASE WHEN pro_grade_previous IN (6.9) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_69_previous_fb
		,SUM(CASE WHEN pro_grade_previous IN (6.7,6.5) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_67_previous_fb
		,SUM(CASE WHEN pro_grade_previous IN (6.4,6.3,6.2) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_63_previous_fb
		,SUM(CASE WHEN pro_grade_previous IN (6.1,6.0) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_60_previous_fb
		,SUM(CASE WHEN pro_grade_previous IN (5.9) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_59_previous_fb
		,SUM(CASE WHEN pro_grade_previous IN (5.8) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_58_previous_fb
		,SUM(CASE WHEN pro_grade_previous >= 7.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_70up_previous_fb
		,SUM(CASE WHEN pro_grade_previous >= 6.5 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_69up_previous_fb
		,SUM(CASE WHEN pro_grade_previous >= 6.2 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_63up_previous_fb
		,SUM(CASE WHEN pro_grade_previous >= 6.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_60up_previous_fb
		,SUM(CASE WHEN pro_grade_previous >= 5.9 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_59up_previous_fb
		,SUM(CASE WHEN pro_grade_previous >= 5.8 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_58up_previous_fb
		,SUM(CASE WHEN pro_grade_current = 8.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_80_current_fb
		,SUM(CASE WHEN pro_grade_current = 7.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_70_current_fb
		,SUM(CASE WHEN pro_grade_current IN (6.9) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_69_current_fb
		,SUM(CASE WHEN pro_grade_current IN (6.7,6.5) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_67_current_fb
		,SUM(CASE WHEN pro_grade_current IN (6.4,6.3,6.2) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_63_current_fb
		,SUM(CASE WHEN pro_grade_current IN (6.1,6.0) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_60_current_fb
		,SUM(CASE WHEN pro_grade_current IN (5.9) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_59_current_fb
		,SUM(CASE WHEN pro_grade_current IN (5.8) AND position IN ('FB') THEN 1 ELSE 0 END) AS count_58_current_fb
		,SUM(CASE WHEN pro_grade_current >= 7.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_70up_current_fb
		,SUM(CASE WHEN pro_grade_current >= 6.5 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_69up_current_fb
		,SUM(CASE WHEN pro_grade_current >= 6.2 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_63up_current_fb
		,SUM(CASE WHEN pro_grade_current >= 6.0 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_60up_current_fb
		,SUM(CASE WHEN pro_grade_current >= 5.9 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_59up_current_fb
		,SUM(CASE WHEN pro_grade_current >= 5.8 AND position IN ('FB') THEN 1 ELSE 0 END) AS count_58up_current_fb

		,SUM(CASE WHEN pro_grade_previous = 8.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_80_previous_rb
		,SUM(CASE WHEN pro_grade_previous = 7.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_70_previous_rb
		,SUM(CASE WHEN pro_grade_previous IN (6.9) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_69_previous_rb
		,SUM(CASE WHEN pro_grade_previous IN (6.7,6.5) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_67_previous_rb
		,SUM(CASE WHEN pro_grade_previous IN (6.4,6.3,6.2) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_63_previous_rb
		,SUM(CASE WHEN pro_grade_previous IN (6.1,6.0) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_60_previous_rb
		,SUM(CASE WHEN pro_grade_previous IN (5.9) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_59_previous_rb
		,SUM(CASE WHEN pro_grade_previous IN (5.8) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_58_previous_rb
		,SUM(CASE WHEN pro_grade_previous >= 7.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_70up_previous_rb
		,SUM(CASE WHEN pro_grade_previous >= 6.5 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_69up_previous_rb
		,SUM(CASE WHEN pro_grade_previous >= 6.2 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_63up_previous_rb
		,SUM(CASE WHEN pro_grade_previous >= 6.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_60up_previous_rb
		,SUM(CASE WHEN pro_grade_previous >= 5.9 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_59up_previous_rb
		,SUM(CASE WHEN pro_grade_previous >= 5.8 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_58up_previous_rb
		,SUM(CASE WHEN pro_grade_current = 8.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_80_current_rb
		,SUM(CASE WHEN pro_grade_current = 7.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_70_current_rb
		,SUM(CASE WHEN pro_grade_current IN (6.9) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_69_current_rb
		,SUM(CASE WHEN pro_grade_current IN (6.7,6.5) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_67_current_rb
		,SUM(CASE WHEN pro_grade_current IN (6.4,6.3,6.2) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_63_current_rb
		,SUM(CASE WHEN pro_grade_current IN (6.1,6.0) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_60_current_rb
		,SUM(CASE WHEN pro_grade_current IN (5.9) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_59_current_rb
		,SUM(CASE WHEN pro_grade_current IN (5.8) AND position IN ('RB') THEN 1 ELSE 0 END) AS count_58_current_rb
		,SUM(CASE WHEN pro_grade_current >= 7.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_70up_current_rb
		,SUM(CASE WHEN pro_grade_current >= 6.5 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_69up_current_rb
		,SUM(CASE WHEN pro_grade_current >= 6.2 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_63up_current_rb
		,SUM(CASE WHEN pro_grade_current >= 6.0 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_60up_current_rb
		,SUM(CASE WHEN pro_grade_current >= 5.9 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_59up_current_rb
		,SUM(CASE WHEN pro_grade_current >= 5.8 AND position IN ('RB') THEN 1 ELSE 0 END) AS count_58up_current_rb

		,SUM(CASE WHEN pro_grade_previous = 8.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_80_previous_ol
		,SUM(CASE WHEN pro_grade_previous = 7.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_70_previous_ol
		,SUM(CASE WHEN pro_grade_previous IN (6.9) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_69_previous_ol
		,SUM(CASE WHEN pro_grade_previous IN (6.7,6.5) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_67_previous_ol
		,SUM(CASE WHEN pro_grade_previous IN (6.4,6.3,6.2) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_63_previous_ol
		,SUM(CASE WHEN pro_grade_previous IN (6.1,6.0) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_60_previous_ol
		,SUM(CASE WHEN pro_grade_previous IN (5.9) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_59_previous_ol
		,SUM(CASE WHEN pro_grade_previous IN (5.8) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_58_previous_ol
		,SUM(CASE WHEN pro_grade_previous >= 7.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_70up_previous_ol
		,SUM(CASE WHEN pro_grade_previous >= 6.5 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_69up_previous_ol
		,SUM(CASE WHEN pro_grade_previous >= 6.2 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_63up_previous_ol
		,SUM(CASE WHEN pro_grade_previous >= 6.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_60up_previous_ol
		,SUM(CASE WHEN pro_grade_previous >= 5.9 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_59up_previous_ol
		,SUM(CASE WHEN pro_grade_previous >= 5.8 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_58up_previous_ol
		,SUM(CASE WHEN pro_grade_current = 8.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_80_current_ol
		,SUM(CASE WHEN pro_grade_current = 7.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_70_current_ol
		,SUM(CASE WHEN pro_grade_current IN (6.9) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_69_current_ol
		,SUM(CASE WHEN pro_grade_current IN (6.7,6.5) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_67_current_ol
		,SUM(CASE WHEN pro_grade_current IN (6.4,6.3,6.2) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_63_current_ol
		,SUM(CASE WHEN pro_grade_current IN (6.1,6.0) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_60_current_ol
		,SUM(CASE WHEN pro_grade_current IN (5.9) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_59_current_ol
		,SUM(CASE WHEN pro_grade_current IN (5.8) AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_58_current_ol
		,SUM(CASE WHEN pro_grade_current >= 7.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_70up_current_ol
		,SUM(CASE WHEN pro_grade_current >= 6.5 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_69up_current_ol
		,SUM(CASE WHEN pro_grade_current >= 6.2 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_63up_current_ol
		,SUM(CASE WHEN pro_grade_current >= 6.0 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_60up_current_ol
		,SUM(CASE WHEN pro_grade_current >= 5.9 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_59up_current_ol
		,SUM(CASE WHEN pro_grade_current >= 5.8 AND position IN ('LOT','LOG','OC','ROG','ROT') THEN 1 ELSE 0 END) AS count_58up_current_ol
	INTO #temp_pass_catcher_counts
	FROM #temp_distinct_player_grades
	GROUP BY nfl_club_id
		,club
		,season


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the team offensive effectiveness metrics.

OUTPUT TABLES:
#temp_yards
#temp_expected_points
#temp_drives

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_yards exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_yards') IS NOT NULL
	DROP TABLE #temp_yards

	SELECT season
		,team
		,cl.nfl_club_id
		,ypp AS yards_per_play
		,rush_ypa AS yards_per_rush
		,pass_ypa AS yards_per_pass
		,pass_nypa AS net_yards_per_pass
		,pass_anypa AS adj_net_yards_per_pass
	INTO #temp_yards
	FROM [AnalyticsWork].[dbo].[rd_seasonfact_teamstats] ts
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON CASE WHEN ts.team IN ('STL','SL','LA') THEN 'LA'
				WHEN ts.team IN ('SD','LAC') THEN 'LAC'
				 ELSE ts.team END = cl.code
	WHERE Season >= 2012
		AND UPPER(Season_Type) = 'REG'
		AND offdef = 'off'


-- Check if #temp_expected_points exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_expected_points') IS NOT NULL
	DROP TABLE #temp_expected_points

	SELECT rp.*
		,nfl_club_id
	INTO #temp_expected_points
	FROM [AnalyticsWork].[dbo].[rd4_run_pass_effectiveness] rp
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON CASE WHEN rp.team IN ('STL','SL','LA') THEN 'LA'
				WHEN rp.team IN ('SD','LAC') THEN 'LAC'
				 ELSE rp.team END = cl.code
	WHERE offdef = 'off' 
		AND  opers = 'all'
		AND dpers = 'all'
		AND run_pct_sit = 'all'
		AND seasontype = 'reg'
		AND team <> 'nfl'
		AND season >= 2012


-- Check if #temp_drives exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_drives') IS NOT NULL
	DROP TABLE #temp_drives

	SELECT do.*
		,nfl_club_id
	INTO #temp_drives
	FROM [AnalyticsWork].[dbo].[teamratings_yards_per_drive_overall] do
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON CASE WHEN do.team IN ('STL','SL','LA') THEN 'LA'
				WHEN do.team IN ('SD','LAC') THEN 'LAC'
				 ELSE do.team END = cl.code
	WHERE season >= 2012


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the weighed average grades, pass catcher counts, and team effectiveness metrics into one table.

OUTPUT TABLES:
Analytics.dbo.work_r_input_fa_wr_strategy

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--TRUNCATE TABLE Analytics.dbo.work_r_input_fa_wr_strategy

--INSERT INTO Analytics.dbo.work_r_input_fa_wr_strategy
	SELECT pc.*
		,qb.current_snap_grade_avg AS current_snap_grade_avg_qb
		,qb.previous_snap_grade_avg AS previous_snap_grade_avg_qb
		,fb.current_snap_grade_avg AS current_snap_grade_avg_fb
		,fb.previous_snap_grade_avg AS previous_snap_grade_avg_fb
		,rb.current_snap_grade_avg AS current_snap_grade_avg_rb
		,rb.previous_snap_grade_avg AS previous_snap_grade_avg_rb
		,ol.current_snap_grade_avg AS current_snap_grade_avg_ol
		,ol.previous_snap_grade_avg AS previous_snap_grade_avg_ol
		,wr.current_snap_grade_avg AS current_snap_grade_avg_wr
		,wr.previous_snap_grade_avg AS previous_snap_grade_avg_wr
		,te.current_snap_grade_avg AS current_snap_grade_avg_te
		,te.previous_snap_grade_avg AS previous_snap_grade_avg_te
		,yards_per_play
		,yards_per_rush
		,yards_per_pass
		,net_yards_per_pass
		,adj_net_yards_per_pass
		,xp_pass
		,xp_total
		,yards_per_stop_off
		,yps_adj_off
	FROM #temp_pass_catcher_counts pc
	LEFT JOIN #temp_weighted_average_grades qb
		ON pc.nfl_club_id = qb.nfl_club_id
		AND pc.season = qb.season
		AND qb.position_blt = 'QB'
	LEFT JOIN #temp_weighted_average_grades fb
		ON pc.nfl_club_id = fb.nfl_club_id
		AND pc.season = fb.season
		AND fb.position_blt = 'FB'
	LEFT JOIN #temp_weighted_average_grades rb
		ON pc.nfl_club_id = rb.nfl_club_id
		AND pc.season = rb.season
		AND rb.position_blt = 'RB'
	LEFT JOIN #temp_weighted_average_grades ol
		ON pc.nfl_club_id = ol.nfl_club_id
		AND pc.season = ol.season
		AND ol.position_blt = 'OL'
	LEFT JOIN #temp_weighted_average_grades wr
		ON pc.nfl_club_id = wr.nfl_club_id
		AND pc.season = wr.season
		AND wr.position_blt = 'WR'
	LEFT JOIN #temp_weighted_average_grades te
		ON pc.nfl_club_id = te.nfl_club_id
		AND pc.season = te.season
		AND te.position_blt = 'TE'
	INNER JOIN #temp_yards ya
		ON pc.nfl_club_id = ya.nfl_club_id
		AND pc.season = ya.Season
	INNER JOIN #temp_expected_points xp
		ON pc.nfl_club_id = xp.nfl_club_id
		AND pc.season = xp.Season
	INNER JOIN #temp_drives dr
		ON pc.nfl_club_id = dr.nfl_club_id
		AND pc.season = dr.Season
