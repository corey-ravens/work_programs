


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

There are multiple levels to compare players at. From most granular to least:
	-On field vs off field for a given play
	-Active or healthy scratch
	-On a roster vs on the street

This step is to get all the player game weeks ready.

Next is to join at the player play level.  Then do a massiv join for evey player to player matchup.
There are going to be some big tables - maybe to them by week or season?

Ignore injured and suspended players - dont count those as "losses" because there isn't an active choice to not play them being made.

OUTPUT TABLES:
#temp_players_gameweek_statuses

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_players_gameweek_statuses exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_players_gameweek_statuses') IS NOT NULL
	DROP TABLE #temp_players_gameweek_statuses

	SELECT nfl_player_id
		,gs.season
		,season_type
		,[week]
		,CASE WHEN nfl_game_key IS NULL THEN 999999 ELSE nfl_game_key END AS nfl_game_key
		,gs.status_roster_simple
		,gs.club_id AS nfl_club_id
		,CASE WHEN status_roster_simple	IN ('FREEAGENT','PRACTICESQUAD','WAIVERS','WAIVEINJ') THEN 1 ELSE 0 END AS is_street
		,CASE WHEN status_roster_simple IN ('ACTIVE','INACTIVE') THEN 1 ELSE 0 END AS is_on_53
		,CASE WHEN status_roster_simple	IN ('INACTIVE') AND injury_status_week IS NULL THEN 1 ELSE 0 END AS is_healthy_scratch
		,CASE WHEN status_roster_simple IN ('ACTIVE') THEN 1 ELSE 0 END AS is_active
		,COALESCE(mp.position_abbreviation,po.translation) AS position
		,CASE WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('QB') THEN 'QB'
			WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('RB','WR','TE','FB','KR','PR') THEN 'ELIGIBLE'
			WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('OC','OG','OT','OL') THEN 'OL'
			WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('DE','DT','NT','DL','OB','IB','RUSH','SAM') THEN 'FRONT7'
			WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('DC','NB','CB','DS','SS','FS') THEN 'DB'
			ELSE NULL
		END AS position_group
		,CASE WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('QB','RB','WR','TE','FB','KR','PR') THEN 'OSKILL'
			ELSE COALESCE(mp.position_abbreviation,po.translation)
		END AS position_group_spec_teams
		,CASE WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('QB','RB','WR','TE','FB','KR','PR','OC','OG','OT','OL') THEN 'OFF'
			WHEN COALESCE(mp.position_abbreviation,po.translation) IN ('DE','DT','NT','DL','OB','IB','RUSH','SAM','DC','NB','CB','DS','SS','FS') THEN 'DEF'
			ELSE 'ST'
		END AS position_unit
	INTO #temp_players_gameweek_statuses
	FROM Analytics.dbo.analysis_players_gameweek_status gs
	LEFT JOIN BaneProductionAnalytics.dbo.clubs cl
		ON gs.club_id = cl.nfl_club_id
		AND cl.is_disabled = 0
	LEFT JOIN ClubDB.dbo.GameRoster ro
		ON gs.nfl_game_key = ro.Gamekey
		AND gs.nfl_player_id = ro.PlayerID
	LEFT JOIN Analytics.dbo.map_nfl_positions_2020 mp
		ON ro.positionabbr = mp.position
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON gs.nfl_player_id = pl.nfl_id
		AND pl.is_deleted = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions po
		ON pl.position_id = po.id
	WHERE gs.season_type = 'REG'
		AND gs.season = 2019
		AND gs.[week] = 1
		--AND cl.code = 'BLT'


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Give players who are on a roster a win over players on the street.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_roster_vs_street exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_roster_vs_street') IS NOT NULL
	DROP TABLE #temp_roster_vs_street

	SELECT ro.nfl_game_key
		,ro.nfl_player_id AS target_nfl_player_id
		,ro.status_roster_simple AS target_status
		,st.nfl_player_id AS matchup_nfl_player_id
		,st.status_roster_simple AS matchup_status
		,1 AS matchup_weight
	INTO #temp_roster_vs_street
	FROM #temp_players_gameweek_statuses ro
	INNER JOIN #temp_players_gameweek_statuses st
		ON ro.season = st.season
		AND ro.season_type = st.season_type
		AND ro.[week] = st.[week]
		AND ro.nfl_player_id <> st.nfl_player_id
		AND st.is_street = 1
	WHERE ro.is_on_53 = 1


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Give players who are active a "win" over players who are healthy scratches.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_active_vs_healthy_scratch exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_active_vs_healthy_scratch') IS NOT NULL
	DROP TABLE #temp_active_vs_healthy_scratch

	SELECT ac.nfl_game_key
		,ac.nfl_player_id AS target_nfl_player_id
		,ac.status_roster_simple AS target_status
		,hs.nfl_player_id AS matchup_nfl_player_id
		,hs.status_roster_simple AS matchup_status
		,1 AS matchup_weight
	INTO #temp_active_vs_healthy_scratch
	FROM #temp_players_gameweek_statuses ac
	INNER JOIN #temp_players_gameweek_statuses hs
		ON ac.nfl_game_key = hs.nfl_game_key
		AND ac.nfl_club_id = hs.nfl_club_id
		AND ac.nfl_player_id <> hs.nfl_player_id
		AND hs.is_healthy_scratch = 1
	WHERE ac.is_active = 1
		

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the roster status data to the play level participation data.

OUTPUT TABLES:
#temp_player_plays

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_plays exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_plays') IS NOT NULL
	DROP TABLE #temp_player_plays

	SELECT an.gsis_game_key AS nfl_game_key
		,pff_pp_id
		,an.pff_play_id
		,da.nfl_player_id
		,'DEF' AS play_type
		,cl.code AS team
		,cl.nfl_club_id AS nfl_club_id_play
	INTO #temp_player_plays
	FROM Analytics.dbo.stage_plays_play_ancillary an
	INNER JOIN Analytics.dbo.stage_plays_player_defensive_alignment da
		ON an.pff_play_id = da.pff_play_id
	LEFT JOIN Analytics.dbo.map_pff_team_code_changes co
		ON da.team = co.pff_TEAM
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl	
		ON CASE WHEN co.pff_TEAM IS NOT NULL THEN co.club_code_new ELSE da.team END = cl.code
		AND cl.is_disabled = 0
	INNER JOIN Analytics.dbo.stage_plays_play_type ty
		ON an.pff_play_id = ty.pff_play_id
	INNER JOIN AnalyticsWork.dbo.rd_playfact aw
		ON an.gsis_game_key = aw.GameKey
		AND an.gsis_play_id = aw.PlayID
	WHERE ty.is_qb_kneel = 0
		AND an.gsis_game_key IN (SELECT DISTINCT nfl_game_key FROM #temp_players_gameweek_statuses)
		AND WPstart BETWEEN 0.1 AND 0.99


	INSERT INTO #temp_player_plays
	SELECT an.gsis_game_key AS nfl_game_key
		,pff_pp_id
		,an.pff_play_id
		,da.nfl_player_id
		,'OFF' AS play_type
		,cl.code AS team
		,cl.nfl_club_id AS nfl_club_id_play
	FROM Analytics.dbo.stage_plays_play_ancillary an
	INNER JOIN Analytics.dbo.stage_plays_player_offensive_alignment da
		ON an.pff_play_id = da.pff_play_id
	LEFT JOIN Analytics.dbo.map_pff_team_code_changes co
		ON da.team = co.pff_TEAM
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl	
		ON CASE WHEN co.pff_TEAM IS NOT NULL THEN co.club_code_new ELSE da.team END = cl.code
		AND cl.is_disabled = 0
	INNER JOIN Analytics.dbo.stage_plays_play_type ty
		ON an.pff_play_id = ty.pff_play_id
	INNER JOIN AnalyticsWork.dbo.rd_playfact aw
		ON an.gsis_game_key = aw.GameKey
		AND an.gsis_play_id = aw.PlayID
	WHERE ty.is_qb_kneel = 0
		AND an.gsis_game_key IN (SELECT DISTINCT nfl_game_key FROM #temp_players_gameweek_statuses)
		AND WPstart BETWEEN 0.1 AND 0.99

/*
	INSERT INTO #temp_player_plays
	SELECT pff_GSISGAMEKEY AS nfl_game_key
		,pff_PPID AS pff_pp_id
		,pff_PLAYID AS pff_play_id
		,pff_GSISPLAYERID AS nfl_player_id
		,'ST' AS play_type
		,cl.code AS team
		,cl.nfl_club_id AS nfl_club_id_play
	FROM PFF.dbo.PFFSpecial da
	LEFT JOIN Analytics.dbo.map_pff_team_code_changes co
		ON da.pff_TEAM = co.pff_TEAM
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl	
		ON CASE WHEN co.pff_TEAM IS NOT NULL THEN co.club_code_new ELSE da.pff_TEAM END = cl.code
		AND cl.is_disabled = 0
	INNER JOIN AnalyticsWork.dbo.rd_playfact aw
		ON da.pff_GSISGAMEKEY = aw.GameKey
		AND da.pff_GSISPLAYID = aw.PlayID
	WHERE pff_GSISGAMEKEY IN (SELECT DISTINCT nfl_game_key FROM #temp_players_gameweek_statuses)
		AND WPstart BETWEEN 0.1 AND 0.99
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Give players who are in on a play a win over the players who are not in on a play.

	-Find the team play counts for each game.
	-Create a table of unique play ids each game.
	-Find the players who are active but not in on the play
	-Join the off field players to the on field players so you have a 'matchup' for every play.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_counts') IS NOT NULL
	DROP TABLE #temp_play_counts

	SELECT nfl_game_key
		,nfl_club_id_play
		,play_type
		,COUNT(DISTINCT pff_play_id) AS play_count
	INTO #temp_play_counts
	FROM #temp_player_plays ta
	GROUP BY nfl_game_key
		,nfl_club_id_play
		,play_type


-- Check if #temp_play_ids exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_ids') IS NOT NULL
	DROP TABLE #temp_play_ids

	SELECT DISTINCT nfl_game_key
		,pff_play_id
		,nfl_club_id_play
		,play_type
	INTO #temp_play_ids
	FROM #temp_player_plays


-- Check if #temp_off_field exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_off_field') IS NOT NULL
	DROP TABLE #temp_off_field

	SELECT pff_play_id
		,nfl_club_id_play
		,gs.nfl_player_id AS nfl_player_id
	INTO #temp_off_field
	FROM #temp_players_gameweek_statuses gs
	INNER JOIN #temp_play_ids pid
		ON gs.nfl_game_key = pid.nfl_game_key
		AND gs.nfl_club_id = pid.nfl_club_id_play
		AND gs.position_unit = pid.play_type
	WHERE gs.is_active = 1
		AND gs.nfl_player_id not in (SELECT DISTINCT nfl_player_id FROM #temp_player_plays pp WHERE pid.pff_play_id = pp.pff_play_id)
	ORDER BY pff_play_id


-- Check if #temp_on_vs_off_field exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_on_vs_off_field') IS NOT NULL
	DROP TABLE #temp_on_vs_off_field

	SELECT ta.nfl_game_key
		,ta.nfl_player_id AS target_nfl_player_id
		,ta.pff_play_id
		,ta.pff_pp_id
		,mu.nfl_player_id AS matchup_nfl_player_id
		,CAST(1 AS FLOAT)/ISNULL(pc.play_count,0) AS matchup_weight
		,pc.play_count
	INTO #temp_on_vs_off_field
	FROM #temp_player_plays ta
	INNER JOIN #temp_off_field mu
		ON ta.pff_play_id = mu.pff_play_id
		AND ta.nfl_club_id_play = mu.nfl_club_id_play
	INNER JOIN #temp_play_counts pc
		ON ta.nfl_game_key = pc.nfl_game_key
		AND ta.nfl_club_id_play = pc.nfl_club_id_play
		AND ta.play_type = pc.play_type


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the full matchup table with all the layers.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_elo_matchups exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_elo_matchups') IS NOT NULL
	DROP TABLE #temp_elo_matchups

	SELECT target_nfl_player_id
		,matchup_nfl_player_id
		,matchup_weight
		,1 AS target_result
		,0 AS matchup_result
		,'playtime' AS matchup_type
		,35 AS matchup_elo_k_value --ELS set this value, read ELO online explanation about what K value is best
	INTO #temp_elo_matchups
	FROM #temp_on_vs_off_field		


	INSERT INTO #temp_elo_matchups
	SELECT target_nfl_player_id
		,matchup_nfl_player_id
		,matchup_weight
		,1 AS target_result
		,0 AS matchup_result
		,'active' AS matchup_type
		,5 AS matchup_elo_k_value --ELS set this value, read ELO online explanation about what K value is best
	FROM #temp_active_vs_healthy_scratch


	INSERT INTO #temp_elo_matchups
	SELECT target_nfl_player_id
		,matchup_nfl_player_id
		,matchup_weight
		,1 AS target_result
		,0 AS matchup_result
		,'street' AS matchup_type
		,1 AS matchup_elo_k_value --ELS set this value, read ELO online explanation about what K value is best
	FROM #temp_roster_vs_street


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join in previous elo ratings.

take up to the previous 3 ratings (that's how ELS did it...why?) maye just go with whateger is his most recent?

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_recent_ratings exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_recent_ratings') IS NOT NULL
	DROP TABLE #temp_recent_ratings
		
	SELECT nfl_player_id
		,MAX(elo_rating) AS rating_previous
	INTO #temp_recent_ratings
	FROM Analytics.dbo.analysis_players_elo_ratings_regular_COREY ee
	WHERE ee.season = (SELECT MAX(season) FROM Analytics.dbo.analysis_players_elo_ratings_regular_COREY ee1 WHERE ee.nfl_player_id = ee1.nfl_player_id)
		AND ee.[week] = (SELECT MAX([week]) FROM Analytics.dbo.analysis_players_elo_ratings_regular_COREY ee2 WHERE ee.nfl_player_id = ee2.nfl_player_id 
							AND ee2.season = (SELECT MAX(season) FROM Analytics.dbo.analysis_players_elo_ratings_regular_COREY ee3 WHERE ee2.nfl_player_id = ee3.nfl_player_id))
	GROUP BY nfl_player_id

/*

-- Check if #temp_recent_ratings exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_recent_ratings') IS NOT NULL
	DROP TABLE #temp_recent_ratings
		
	SELECT nfl_player_id
		,rating_group_key
		,rating AS previous_rating
		,RANK() OVER (PARTITION BY nfl_player_id ORDER BY season DESC, [week] DESC, rating DESC) AS rating_order
	INTO #temp_recent_ratings
	FROM Analytics.dbo.analysis_players_elo_ratings_regular_COREY

*/

-- Check if #temp_elo_matchups_with_ratings exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_elo_matchups_with_ratings') IS NOT NULL
	DROP TABLE #temp_elo_matchups_with_ratings
		
	SELECT el.*
		,COALESCE(ta.rating_previous,1400) AS target_rating_previous
		,COALESCE(mu.rating_previous,1400) AS matchup_rating_previous
		,CAST(POWER(10,COALESCE(ta.rating_previous,1400)/400) AS FLOAT) / NULLIF((POWER(10,COALESCE(ta.rating_previous,1400)/400) + POWER(10,COALESCE(mu.rating_previous,1400)/400)),0) AS target_expected_score
		,CAST(POWER(10,COALESCE(mu.rating_previous,1400)/400) AS FLOAT) / NULLIF((POWER(10,COALESCE(ta.rating_previous,1400)/400) + POWER(10,COALESCE(mu.rating_previous,1400)/400)),0) AS matchup_expected_score
	INTO #temp_elo_matchups_with_ratings
	FROM #temp_elo_matchups el
	LEFT JOIN #temp_recent_ratings ta
		ON el.target_nfl_player_id = ta.nfl_player_id
		--AND ta.rating_order = 1 --if you switch to finding recent by order and not subqueries
	LEFT JOIN #temp_recent_ratings mu
		ON el.matchup_nfl_player_id = mu.nfl_player_id
		--AND mu.rating_order = 1 --if you switch to finding recent by order and not subqueries


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sum up the player elo ratings.

YOu keep them together up until this point because you need them in the same row to get the "expected score" for each player in the contest.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_AA exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_AA') IS NOT NULL
	DROP TABLE #temp_AA
		
	SELECT target_nfl_player_id AS nfl_player_id
		,SUM((1 - target_expected_score) * matchup_weight * matchup_elo_k_value) AS elo_score
	INTO #temp_AA
	FROM #temp_elo_matchups_with_ratings
	WHERE target_nfl_player_id = 33234
	GROUP BY target_nfl_player_id


	INSERT INTO #temp_AA
	SELECT matchup_nfl_player_id AS nfl_player_id
		,SUM((0 - target_expected_score) * matchup_weight * matchup_elo_k_value) AS elo_score --the way the joins are setup, matchup_player is the "loser"
	FROM #temp_elo_matchups_with_ratings
	WHERE matchup_nfl_player_id = 33234
	GROUP BY matchup_nfl_player_id

