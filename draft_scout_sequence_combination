

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table with all the scout grades and positions.

OUTPUT TABLES:
#temp_evaluations_overall

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_overall exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_overall') IS NOT NULL
	DROP TABLE #temp_evaluations_overall

	SELECT re.id AS report_id
		,author_id AS scout_id
		,player_id AS bane_player_id
		,re.created_at AS report_date
		,RANK() OVER (PARTITION BY player_id, author_id ORDER BY re.created_at DESC) AS report_order
		,CASE WHEN re.position_id IS NULL THEN 'NONE' ELSE CASE WHEN po.abbreviation = 'DE43' THEN 'OB' ELSE translation END END AS position
		,CASE WHEN CAST(gr.value AS NUMERIC (3,1)) IN (8.0) THEN 100
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (7.0) THEN 92
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.9) THEN 82
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.7,6.5) THEN 71
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.4,6.3,6.2) THEN 64
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.9) THEN 53.5
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.8) THEN 50
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.7) THEN 47
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.6) THEN 45.5
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.4) THEN 43
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.2) THEN 41
			WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.0) THEN 40
			ELSE NULL
		END AS grade_value
		,CAST(gr.value AS NUMERIC (3,1)) AS grade_bucket    
	INTO #temp_evaluations_overall
	FROM [BaneProductionAnalytics].[dbo].[reports] re
	INNER JOIN [BaneProductionAnalytics].[dbo].[taggings] t 
		ON t.taggable_id = re.id 
		AND UPPER(t.taggable_type) = 'REPORT'
		AND t.tag_id = 11 --(it is a college report)
	INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl 
		ON re.player_id = pl.id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
		ON re.grade_id=gr.id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[users] us
		ON re.author_id=us.id    
	LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] po
		ON re.position_id = po.id           
	WHERE 1=1
		AND re.is_deleted = 0
		AND UPPER(re.[type]) <> 'SPECIAL TEAMS' 
		AND translation NOT IN ('ST','PK','PT','LS')
		AND gr.scale_id IN (4,6) --(it is an overall grade)
		AND re.[type] IN ('fall')
		AND MONTH(re.created_at) IN (6,7,8,9,10,11,12)


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the scout sequence lists to the grades.

OUTPUT TABLES:
#temp_sequence_lists

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_sequence_lists exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_sequence_lists') IS NOT NULL
	DROP TABLE #temp_sequence_lists

	SELECT [user_id] AS scout_id
		,UPPER(CONCAT(LEFT(us.first_name,1),LEFT(us.last_name,3))) AS scout
		,[is_primary]
		,RANK() OVER (PARTITION BY [user_id] ORDER BY is_primary desc) AS is_primary_adjusted
		,li.updated_at
		,li.[draft_year] AS list_year
		,it.position AS sequence_rank
		,pl.id AS bane_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,ev.position
		,ev.grade_bucket
		,CASE WHEN grade_bucket = 5.4 THEN -1
			WHEN grade_bucket = 5.6 THEN 0
			WHEN grade_bucket = 5.7 THEN 1
			WHEN grade_bucket = 5.8 THEN 2
			WHEN grade_bucket = 5.9 THEN 3
			WHEN grade_bucket = 6.0 THEN 4
			WHEN grade_bucket = 6.1 THEN 4
			WHEN grade_bucket = 6.3 THEN 5
			WHEN grade_bucket = 6.5 THEN 6
			WHEN grade_bucket = 6.7 THEN 6
			WHEN grade_bucket = 6.9 THEN 7
			WHEN grade_bucket = 7.0 THEN 8
			WHEN grade_bucket = 8.0 THEN 9
		END AS grade_bucket_adjusted
	INTO #temp_sequence_lists
	FROM [BaneProductionAnalytics].[dbo].[lists] li
	INNER JOIN BaneProductionAnalytics.dbo.users us
		ON li.[user_id] = us.id
	INNER JOIN BaneProductionAnalytics.dbo.list_items it
		ON it.list_id = li.id
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON it.player_id = pl.id
		AND pl.is_deleted = 0
	LEFT JOIN #temp_evaluations_overall ev
		ON pl.id = ev.bane_player_id
		AND li.[user_id] = ev.scout_id
		AND ev.report_order = 1
	WHERE li.is_deleted = 0
		AND us.[type] = 'scout'
		AND li.draft_year = 2020
		--AND li.is_primary = 1
	ORDER BY li.draft_year
		,li.[user_id]
		,li.id
		,it.position


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Self join the sequence table so you can get all the head to head player matchups for each scout.

OUTPUT TABLES:
#temp_sequence_list_self_join

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_sequence_lists_self_join exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_sequence_lists_self_join') IS NOT NULL
	DROP TABLE #temp_sequence_lists_self_join

	SELECT sl.*
		,sl2.bane_player_id AS matchup_player_id
		,1 AS matchup_weight
		,RANK() OVER (PARTITION BY sl.scout_id ORDER BY sl.sequence_rank, sl2.sequence_rank) AS matchup_number
		,RANK() OVER (PARTITION BY sl.scout_id ORDER BY sl.sequence_rank, sl2.sequence_rank) % 2  AS matchup_random
	INTO #temp_sequence_lists_self_join
	FROM #temp_sequence_lists sl
	INNER JOIN #temp_sequence_lists sl2
		ON sl.scout_id = sl2.scout_id
		AND sl.is_primary_adjusted = sl2.is_primary_adjusted
		AND sl2.sequence_rank > sl.sequence_rank
	WHERE sl.is_primary_adjusted = 1


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Assign matchups as home/away based on the matchup_random vaiable.

OUTPUT TABLES:
#temp_sequence_list_home_away

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_sequence_list_home_away exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_sequence_list_home_away') IS NOT NULL
	DROP TABLE #temp_sequence_list_home_away

	SELECT *
		,CASE WHEN matchup_random >= 0.5 THEN bane_player_id ELSE matchup_player_id END AS home_player_id
		,CASE WHEN matchup_random < 0.5 THEN bane_player_id ELSE matchup_player_id END AS away_player_id
		,CASE WHEN matchup_random >= 0.5 THEN 1 ELSE 0 END AS home_win
	--INTO #temp_sequence_list_home_away
	FROM #temp_sequence_lists_self_join

/*
TRUNCATE TABLE AnalyticsDevelopment.dbo.work_r_input_sequence_list_combination

SELECT *
INTO AnalyticsDevelopment.dbo.work_r_input_sequence_list_combination
FROM #temp_sequence_list_home_away
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Run the R program X:\R\college_scouting\scout_sequence_list_combination_elo

This gets you the scores for each player from his head to head matchups with everyone else.

OUTPUT TABLES:
AnalyticsDevelopment.dbo.r_output_draft_sequence_combination_elo

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the max, min, and average sequence list rankings and join in the ELO scores.

OUTPUT TABLES:
#temp_sequence_list_average

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_sequence_list_average exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_sequence_list_average') IS NOT NULL
	DROP TABLE #temp_sequence_list_average

	SELECT sl.bane_player_id
		,player
		,el.elo_ranking
		,el.elo_score
		,COUNT(*) AS player_sequence_count
		,MIN(sl.sequence_rank) AS sequence_rank_min
		,MAX(sl.sequence_rank) AS sequence_rank_max
		,AVG(CAST(sl.sequence_rank AS FLOAT)) AS sequence_rank_avg
	--INTO #temp_sequence_list_average
	FROM #temp_sequence_lists sl
	LEFT JOIN AnalyticsDevelopment.dbo.r_output_draft_sequence_combination_elo el
		ON sl.bane_player_id = el.bane_player_id
	GROUP BY sl.bane_player_id
		,player
		,el.elo_ranking
		,el.elo_score
	ORDER BY el.elo_ranking
