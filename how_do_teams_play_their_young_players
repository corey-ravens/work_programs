

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

v3 adds the weighted average snap grade
	this didn't really work because when a rookie was a starter at a certain position (like Zach Orr at IB), 
	the grade was really high because then it only took CJ's snap pct.  It wasn't a trie measure of who the
	player had to play 'behind'.

v4 switched to a count of 6.3 and 6.0 and above players on the team at that position, EXCLUDING the given player.
v5 switches to doing the modeling at the PLAY level instead of the season level.

should you include games in the play time expectation calculation, or just do weighted average play time by team?
the latter is so guys like adeboyejo who play one game don't have the same effect as guys who play in 16 games.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions') IS NOT NULL
	DROP TABLE #temp_draft_board_positions

	SELECT player_id AS bane_player_id
		,position
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			ELSE NULL
	END AS order_by
	INTO #temp_draft_board_positions
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE position != ''
		AND position IS NOT NULL
		AND player_id <> 64668


-- Check if #temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_with_order

	SELECT bane_player_id
		,position
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_position_order
	INTO #temp_draft_board_positions_with_order
	FROM #temp_draft_board_positions

/*
SELECT *
FROM #temp_draft_board_positions_with_order
*/

-- Check if #temp_draft_board_positions_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_latest

	SELECT *
	INTO #temp_draft_board_positions_latest
	FROM #temp_draft_board_positions_with_order
	WHERE draft_board_position_order = 1

/*
SELECT *
FROM #temp_draft_board_positions_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board grade. Take a players draft
board grade from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_grades_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades') IS NOT NULL
	DROP TABLE #temp_draft_board_grades

	SELECT player_id AS bane_player_id
		,legacy_grade
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			ELSE NULL
	END AS order_by
	INTO #temp_draft_board_grades
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE legacy_grade != ''
		AND legacy_grade IS NOT NULL
		AND player_id <> 64668


-- Check if #temp_draft_board_grades_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_with_order

	SELECT bane_player_id
		,legacy_grade
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_grade_order
	INTO #temp_draft_board_grades_with_order
	FROM #temp_draft_board_grades

/*
SELECT *
FROM #temp_draft_board_grades_with_order
*/

-- Check if #temp_draft_board_grades_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_latest

	SELECT *
	INTO #temp_draft_board_grades_latest
	FROM #temp_draft_board_grades_with_order
	WHERE draft_board_grade_order = 1

/*
SELECT *
FROM #temp_draft_board_grades_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a temp table with all players who have been on a 53 so you can have
a variable denoting whether a player ever made a 53. You may not want to count
these players against teams that get them.

OUTPUT TABLES:
#temp_player_on_53

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_on_53 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_on_53') IS NOT NULL
	DROP TABLE #temp_player_on_53

	SELECT DISTINCT nfl_player_id
		,1 AS on_53
	INTO #temp_player_on_53
	FROM Analytics.dbo.analysis_players_gameweek_status
	WHERE status_roster_simple IN ('ACTIVE','INACTIVE')
		AND season_type IN ('REG','POST')


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the draft board position and player identifying information.

You can join this to the play data to get snaps played by first and second year players.

OUTPUT TABLES:
#temp_player_list

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_list exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_list') IS NOT NULL
	DROP TABLE #temp_player_list

	SELECT nfl_id AS nfl_player_id
		,pl.id AS bane_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,nfl_entry_year
		,draft_round
		,draft_number
		,cl.nfl_club_id AS nfl_entry_club_id_not_bane
		,COALESCE(po.position,pos.translation) AS position
		,pos.team AS side_of_ball
		,legacy_grade	
		,COALESCE(on_53,0) AS on_53
	INTO #temp_player_list
	FROM BaneProductionAnalytics.dbo.players pl
	LEFT JOIN #temp_draft_board_positions_latest po
		ON pl.id = po.bane_player_id
	LEFT JOIN #temp_draft_board_grades_latest gr
		ON pl.id = gr.bane_player_id
	LEFT JOIN BaneProductionAnalytics.dbo.clubs cl
		ON pl.nfl_entry_club_id = cl.id
		--AND cl.is_disabled = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions pos
		ON pl.position_id = pos.id
	LEFT JOIN #temp_player_on_53 o53
		ON pl.nfl_id = o53.nfl_player_id
	WHERE pl.is_deleted = 0
		AND pl.draft_year >= 2005
		AND ABS(pl.draft_year - pl.nfl_entry_year) < 10
		AND pl.nfl_id IS NOT NULL



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table of all snaps since 2012.

OUTPUT TABLES:
#temp_all_snaps

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_all_snaps exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_all_snaps') IS NOT NULL
	DROP TABLE #temp_all_snaps

	SELECT sp.pff_GSISPLAYERID AS nfl_player_id
		,sp.pff_PLAYID AS pff_play_id
		,sp.pff_GAMEID AS pff_game_id
		,an.season
		,[week]
		,pff_TEAM AS team
		,'special teams' AS snap_type
		,CASE WHEN pff_POSITION = 'P' THEN 'PT  '	
			WHEN pff_POSITION = 'H' THEN 'HO  ' 
			ELSE CONCAT(LEFT(pff_position,2),'  ') 
		END AS position_play
		,'SPTEAM' AS position_pff_game
		,WPstart AS win_pct_start
		,CASE WHEN LTRIM(RTRIM(UPPER(sp.pff_INJURED))) = 'Y' THEN 1 ELSE 0 END AS injured_on_play
		,co.game_clock_counting_up_pff
	INTO #temp_all_snaps
	FROM PFF.dbo.PFFSpecial sp
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON sp.pff_PLAYID = an.pff_play_id
	INNER JOIN Analytics.dbo.stage_plays_play_context co
		ON sp.pff_PLAYID = co.pff_play_id
	INNER JOIN [AnalyticsWork].[dbo].[rd_playfact] pf
		ON sp.pff_GSISPLAYID = pf.PlayID
		AND sp.pff_GSISGAMEKEY = pf.GameKey
	WHERE an.season >= 2012
		AND an.season_type = 'REG'


	INSERT INTO #temp_all_snaps
	SELECT nfl_player_id
		,da.pff_play_id
		,pff_game_id
		,an.season
		,[week]
		,team
		,'defense' AS snap_type	
		,position_blt AS position_play
		,position_pff_game
		,WPstart AS win_pct_start
		,injured_on_play_pff
		,co.game_clock_counting_up_pff
	FROM Analytics.dbo.stage_plays_player_defensive_alignment da
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON da.pff_play_id = an.pff_play_id
	INNER JOIN [AnalyticsWork].[dbo].[rd_playfact] pf
		ON an.gsis_play_id = pf.PlayID
		AND an.gsis_game_key = pf.GameKey
	INNER JOIN Analytics.dbo.stage_plays_play_context co
		ON da.pff_play_id = co.pff_play_id
	WHERE an.season >= 2012
		AND an.season_type = 'REG'


	INSERT INTO #temp_all_snaps
	SELECT nfl_player_id
		,oa.pff_play_id
		,pff_game_id
		,an.season
		,[week]
		,team
		,'offense' AS snap_type
		,position_blt AS position_play
		,position_pff_game
		,WPstart AS win_pct_start
		,injured_on_play_pff
		,co.game_clock_counting_up_pff
	FROM Analytics.dbo.stage_plays_player_offensive_alignment oa
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON oa.pff_play_id = an.pff_play_id
	INNER JOIN [AnalyticsWork].[dbo].[rd_playfact] pf
		ON an.gsis_play_id = pf.PlayID
		AND an.gsis_game_key = pf.GameKey
	INNER JOIN Analytics.dbo.stage_plays_play_context co
		ON oa.pff_play_id = co.pff_play_id
	WHERE an.season >= 2012
		AND an.season_type = 'REG'


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

You need a table that has a row for every play in a game for every player who was in that game.

First create a table with games and plays. Then create a table with games and players.
Join them and you should have a row for every player for each play in a game he played in (whether
he was in on the play or not).

OUTPUT TABLES:
#temp_games_plays
#temp_games_players
#temp_games_plays_players

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays') IS NOT NULL
	DROP TABLE #temp_games_plays

	SELECT DISTINCT pff_game_id
		,pff_play_id
		,game_clock_counting_up_pff
	INTO #temp_games_plays
	FROM #temp_all_snaps

-- Check if #temp_games_players exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_players') IS NOT NULL
	DROP TABLE #temp_games_players

	SELECT DISTINCT pff_game_id
		,nfl_player_id
	INTO #temp_games_players
	FROM #temp_all_snaps

-- Check if #temp_games_plays_players exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players') IS NOT NULL
	DROP TABLE #temp_games_plays_players

	SELECT py.pff_game_id
		,py.pff_play_id
		,py.game_clock_counting_up_pff
		,pl.nfl_player_id
	INTO #temp_games_plays_players
	FROM #temp_games_plays py
	INNER JOIN #temp_games_players pl
		ON py.pff_game_id = pl.pff_game_id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Now join the all snaps data to the games-plays-player table so you can note if
a player was in on a play or hurt on a play.  This is the table you can use to create
the currently_injured variable.

To do that, flag when a player gets an injury and then loop through to see if he 
came back in.  If not, then he is flagged as injured the rest of the game, if so
then he is flagged injured until he comes back in.

OUTPUT TABLE:
#temp_games_plays_players_injuries

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays_players_injuries exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players_injuries') IS NOT NULL
	DROP TABLE #temp_games_plays_players_injuries

	SELECT gpp.pff_game_id
		,gpp.pff_play_id
		,gpp.game_clock_counting_up_pff
		,gpp.nfl_player_id
		,season
		,asn.team
		,asn.position_play
		,asn.position_pff_game
		,CASE WHEN asn.nfl_player_id IS NOT NULL THEN 1 ELSE 0 END AS active_play
		,CASE WHEN asn.injured_on_play = 1 THEN 1 ELSE 0 END AS injured_on_play
	INTO #temp_games_plays_players_injuries
	FROM #temp_games_plays_players gpp
	LEFT JOIN #temp_all_snaps asn
		ON gpp.pff_game_id = asn.pff_game_id
		AND gpp.pff_play_id = asn.pff_play_id
		AND gpp.nfl_player_id = asn.nfl_player_id

/*
	SELECT *
	--INTO Analytics.dbo.work_r_input_injury_loop
	FROM #temp_all_snaps
	--WHERE nfl_player_id = 
		--AND pff_game_id = 
	ORDER BY nfl_player_id, pff_game_id, game_clock_counting_up_pff
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

RUN THE R PROGRAM
X:\R\pro_scouting\injury_loop

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

After running the r program to get available/not available for injury, join the
grades so you can count up the grades of WHO IS AVAILABLE each play excluding the target player.

OUTPUT TABLE:
#temp_currently_injured_with_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_currently_injured_with_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_currently_injured_with_grades') IS NOT NULL
	DROP TABLE #temp_currently_injured_with_grades

	SELECT ci.*
		,season
		,team
		,position_play
		,position_pff_game
	INTO #temp_currently_injured_with_grades
	FROM Analytics.dbo.r_output_play_player_currently_injured ci
	INNER JOIN #temp_games_plays_players_injuries gp
		ON ci.nfl_player_id = gp.nfl_player_id
		AND ci.pff_game_id = gp.pff_game_id
		AND ci.pff_play_id = gp.pff_play_id
	



	Analytics.dbo.analysis_players_pro_grades	pgc
		ON ci.nfl_player_id = pgc.nfl_player_id
		AND ci.season = pgc.report_season
		AND pgc.created_date = (SELECT MAX(created_date) FROM Analytics.dbo.analysis_players_pro_grades)
		

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 and above by team and position for each play, excluding the
target player.

OUTPUT TABLE:
#temp_team_position_grade_counts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_team_position_grade_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_team_position_grade_counts') IS NOT NULL
	DROP TABLE #temp_team_position_grade_counts

	SELECT pg.nfl_player_id
		,report_season AS season
		,pg.nfl_club_id
		,(SELECT COUNT(DISTINCT nfl_player_id) FROM #temp_grades_with_team pg2 WHERE pg.report_season = pg2.report_season  AND pg.nfl_club_id = pg2.nfl_club_id AND pg.position = pg2.position AND pg.bane_player_id <> pg2.bane_player_id AND pg2.grade_bucket >= 6.0) AS grade_count_60_up
		,(SELECT COUNT(DISTINCT nfl_player_id) FROM #temp_grades_with_team pg2 WHERE pg.report_season = pg2.report_season  AND pg.nfl_club_id = pg2.nfl_club_id AND pg.position = pg2.position AND pg.bane_player_id <> pg2.bane_player_id AND pg2.grade_bucket >= 6.3) AS grade_count_63_up
	INTO #temp_team_position_grade_counts
	FROM #temp_grades_with_team pg


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the team position grade counts to the play time table.

OUTPUT TABLE:
#temp_player_play_time_with_grade_count

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_play_time_with_grade_count exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_play_time_with_grade_count') IS NOT NULL
	DROP TABLE #temp_player_play_time_with_grade_count

	SELECT pt.*
		,grade_count_60_up
		,grade_count_63_up
	INTO #temp_player_play_time_with_grade_count
	FROM #temp_player_play_time pt
	LEFT JOIN #temp_team_position_grade_counts tc
		ON pt.nfl_player_id = tc.nfl_player_id
		AND pt.season = tc.season
		AND pt.nfl_club_id = tc.nfl_club_id



--TRUNCATE TABLE Analytics.dbo.work_r_input_young_players_snap_pct
--INSERT INTO Analytics.dbo.work_r_input_young_players_snap_pct

--SELECT *
--FROM Analytics.dbo.work_r_output_young_players_snap_pct
