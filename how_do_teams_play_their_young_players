

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

v3 adds the weighted average snap grade
	this didn't really work because when a rookie was a starter at a certain position (like Zach Orr at IB), 
	the grade was really high because then it only took CJ's snap pct.  It wasn't a trie measure of who the
	player had to play 'behind'.

v4 switched to a count of 6.3 and 6.0 and above players on the team at that position, EXCLUDING the given player.
v5 switches to doing the modeling at the PLAY level instead of the season level.
V6 IS A SLIGHT UPDATE TO V5. IF IT CHECKS OUT GO AHEAD AND RESET ITS NAME TO V5 AND OVERWIRTE THE OLD V5



need to change it so it only counts plays on his side of the ball
for example marlon humphrey has 150ish plays per game because he has
offensive play rows too. remove those so you only predicting likelihood of playing
you sie of the ball plays.




need to update r_output_play_player_currently_injured so that it has the updated position
(so ST is replaced by a real position)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions') IS NOT NULL
	DROP TABLE #temp_draft_board_positions

	SELECT player_id AS bane_player_id
		,position
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			ELSE NULL
	END AS order_by
	INTO #temp_draft_board_positions
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE position != ''
		AND position IS NOT NULL
		AND player_id <> 64668


-- Check if #temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_with_order

	SELECT bane_player_id
		,position
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_position_order
	INTO #temp_draft_board_positions_with_order
	FROM #temp_draft_board_positions

/*
SELECT *
FROM #temp_draft_board_positions_with_order
*/

-- Check if #temp_draft_board_positions_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_latest

	SELECT *
	INTO #temp_draft_board_positions_latest
	FROM #temp_draft_board_positions_with_order
	WHERE draft_board_position_order = 1

/*
SELECT *
FROM #temp_draft_board_positions_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board grade. Take a players draft
board grade from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_grades_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades') IS NOT NULL
	DROP TABLE #temp_draft_board_grades

	SELECT player_id AS bane_player_id
		,legacy_grade
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			ELSE NULL
	END AS order_by
	INTO #temp_draft_board_grades
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE legacy_grade != ''
		AND legacy_grade IS NOT NULL
		AND player_id <> 64668


-- Check if #temp_draft_board_grades_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_with_order

	SELECT bane_player_id
		,legacy_grade
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_grade_order
	INTO #temp_draft_board_grades_with_order
	FROM #temp_draft_board_grades

/*
SELECT *
FROM #temp_draft_board_grades_with_order
*/

-- Check if #temp_draft_board_grades_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_latest

	SELECT *
	INTO #temp_draft_board_grades_latest
	FROM #temp_draft_board_grades_with_order
	WHERE draft_board_grade_order = 1

/*
SELECT *
FROM #temp_draft_board_grades_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a temp table with all players who have been on a 53 so you can have
a variable denoting whether a player ever made a 53. You may not want to count
these players against teams that get them.

OUTPUT TABLES:
#temp_player_on_53

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_on_53 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_on_53') IS NOT NULL
	DROP TABLE #temp_player_on_53

	SELECT DISTINCT nfl_player_id
		,1 AS on_53
	INTO #temp_player_on_53
	FROM Analytics.dbo.analysis_players_gameweek_status
	WHERE status_roster_simple IN ('ACTIVE','INACTIVE')
		AND season_type IN ('REG','POST')


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the draft board position and player identifying information.

You can join this to the play data to get snaps played by first and second year players.

OUTPUT TABLES:
#temp_player_list

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_list exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_list') IS NOT NULL
	DROP TABLE #temp_player_list

	SELECT nfl_id AS nfl_player_id
		,pl.id AS bane_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,nfl_entry_year
		,draft_round
		,draft_number
		,cl.nfl_club_id AS nfl_entry_club_id_not_bane
		,COALESCE(po.position,pos.translation) AS position
		,pos.team AS side_of_ball
		,legacy_grade	
		,COALESCE(on_53,0) AS on_53
	INTO #temp_player_list
	FROM BaneProductionAnalytics.dbo.players pl
	LEFT JOIN #temp_draft_board_positions_latest po
		ON pl.id = po.bane_player_id
	LEFT JOIN #temp_draft_board_grades_latest gr
		ON pl.id = gr.bane_player_id
	LEFT JOIN BaneProductionAnalytics.dbo.clubs cl
		ON pl.nfl_entry_club_id = cl.id
		--AND cl.is_disabled = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions pos
		ON pl.position_id = pos.id
	LEFT JOIN #temp_player_on_53 o53
		ON pl.nfl_id = o53.nfl_player_id
	WHERE pl.is_deleted = 0
		AND pl.draft_year >= 2005
		AND ABS(pl.draft_year - pl.nfl_entry_year) < 10
		AND pl.nfl_id IS NOT NULL



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table of all snaps since 2012.

OUTPUT TABLES:
#temp_all_snaps

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_all_snaps exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_all_snaps') IS NOT NULL
	DROP TABLE #temp_all_snaps

	SELECT sp.pff_GSISPLAYERID AS nfl_player_id
		,sp.pff_PLAYID AS pff_play_id
		,sp.pff_GAMEID AS pff_game_id
		,an.season
		,[week]
		,pff_TEAM AS team
		,'special teams' AS snap_type
		,CASE WHEN pff_POSITION = 'P' THEN 'PT  '	
			WHEN pff_POSITION = 'H' THEN 'HO  ' 
			ELSE CONCAT(LEFT(pff_position,2),'  ') 
		END AS position_play
		,CAST(-999 AS FLOAT) AS win_pct_start
		,CASE WHEN LTRIM(RTRIM(UPPER(sp.pff_INJURED))) = 'Y' THEN 1 ELSE 0 END AS injured_on_play
		,co.game_clock_counting_up_pff
	INTO #temp_all_snaps
	FROM PFF.dbo.PFFSpecial sp
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON sp.pff_PLAYID = an.pff_play_id
	INNER JOIN Analytics.dbo.stage_plays_play_context co
		ON sp.pff_PLAYID = co.pff_play_id
	INNER JOIN [AnalyticsWork].[dbo].[rd_playfact] pf
		ON sp.pff_GSISPLAYID = pf.PlayID
		AND sp.pff_GSISGAMEKEY = pf.GameKey
	WHERE an.season >= 2012
		AND an.season_type = 'REG'


	INSERT INTO #temp_all_snaps
	SELECT nfl_player_id
		,da.pff_play_id
		,pff_game_id
		,an.season
		,[week]
		,team
		,'defense' AS snap_type	
		,position_blt AS position_play
		,1 - WPstart AS win_pct_start
		,injured_on_play_pff
		,co.game_clock_counting_up_pff
	FROM Analytics.dbo.stage_plays_player_defensive_alignment da
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON da.pff_play_id = an.pff_play_id
	INNER JOIN [AnalyticsWork].[dbo].[rd_playfact] pf
		ON an.gsis_play_id = pf.PlayID
		AND an.gsis_game_key = pf.GameKey
	INNER JOIN Analytics.dbo.stage_plays_play_context co
		ON da.pff_play_id = co.pff_play_id
	WHERE an.season >= 2012
		AND an.season_type = 'REG'


	INSERT INTO #temp_all_snaps
	SELECT nfl_player_id
		,oa.pff_play_id
		,pff_game_id
		,an.season
		,[week]
		,team
		,'offense' AS snap_type
		,position_blt AS position_play
		,WPstart AS win_pct_start
		,injured_on_play_pff
		,co.game_clock_counting_up_pff
	FROM Analytics.dbo.stage_plays_player_offensive_alignment oa
	INNER JOIN Analytics.dbo.stage_plays_play_ancillary an
		ON oa.pff_play_id = an.pff_play_id
	INNER JOIN [AnalyticsWork].[dbo].[rd_playfact] pf
		ON an.gsis_play_id = pf.PlayID
		AND an.gsis_game_key = pf.GameKey
	INNER JOIN Analytics.dbo.stage_plays_play_context co
		ON oa.pff_play_id = co.pff_play_id
	WHERE an.season >= 2012
		AND an.season_type = 'REG'

	--Because you needed to set it as float, you filled in Spec Teams win pct with -999, here set them back to NULL
	UPDATE #temp_all_snaps
	SET win_pct_start = NULL
	WHERE win_pct_start = -999


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the snaps by position by game so you can get a player's game position.
It will be the one where he plays the most snaps.

OUTPUT TABLE:
#temp_player_position_snaps
#temp_player_position_snaps_ranks
#temp_player_game_position

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_position_snaps exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_position_snaps') IS NOT NULL
	DROP TABLE #temp_player_position_snaps

	SELECT nfl_player_id
		,pff_game_id
		,season
		,team
		,CASE WHEN position_play IN ('LT','RT') THEN 'OT'
			WHEN position_play IN ('LG','RG') THEN 'OG'			
			WHEN position_play IN ('DT3T','NT') THEN 'DT'
			WHEN position_play IN ('DE5T') THEN 'DE'
			WHEN position_play IN ('MIKE','WILL','OB43') THEN 'IB'
			WHEN position_play IN ('RUSH','SAM','OB34','DE43') THEN 'OB'
			WHEN position_play IN ('NB') THEN 'CB'
			WHEN position_play IN ('FS','SS') THEN 'DS'
			WHEN snap_type = 'special teams' THEN 'ST'
			ELSE position_play
		END AS position_game
		,SUM(CASE WHEN snap_type <> 'special teams' THEN 1 WHEN snap_type = 'special teams' THEN 0 ELSE NULL END) AS position_snaps
	INTO #temp_player_position_snaps
	FROM #temp_all_snaps
	GROUP BY nfl_player_id
		,pff_game_id
		,season
		,team
		,CASE WHEN position_play IN ('LT','RT') THEN 'OT'
			WHEN position_play IN ('LG','RG') THEN 'OG'			
			WHEN position_play IN ('DT3T','NT') THEN 'DT'
			WHEN position_play IN ('DE5T') THEN 'DE'
			WHEN position_play IN ('MIKE','WILL','OB43') THEN 'IB'
			WHEN position_play IN ('RUSH','SAM','OB34','DE43') THEN 'OB'
			WHEN position_play IN ('NB') THEN 'CB'
			WHEN position_play IN ('FS','SS') THEN 'DS'
			WHEN snap_type = 'special teams' THEN 'ST'
			ELSE position_play
		END


-- Check if #temp_player_position_snaps_ranks exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_position_snaps_ranks') IS NOT NULL
	DROP TABLE #temp_player_position_snaps_ranks

	SELECT *
		,RANK() OVER (PARTITION BY nfl_player_id, pff_game_id ORDER BY position_snaps DESC, position_game) AS position_snaps_rank
	INTO #temp_player_position_snaps_ranks
	FROM #temp_player_position_snaps


-- Check if #temp_player_game_position exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_game_position') IS NOT NULL
	DROP TABLE #temp_player_game_position

	SELECT *
	INTO #temp_player_game_position
	FROM #temp_player_position_snaps_ranks
	WHERE position_snaps_rank = 1


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

You need a table that has a row for every play in a game for every player who was in that game.

First create a table with games and plays. Then create a table with games and players.
Join them and you should have a row for every player for each play in a game he played in (whether
he was in on the play or not).

OUTPUT TABLES:
#temp_games_plays
#temp_games_players
#temp_games_plays_players

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays') IS NOT NULL
	DROP TABLE #temp_games_plays

	SELECT DISTINCT pff_game_id
		,pff_play_id
		,game_clock_counting_up_pff
	INTO #temp_games_plays
	FROM #temp_all_snaps

-- Check if #temp_games_players exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_players') IS NOT NULL
	DROP TABLE #temp_games_players

	SELECT DISTINCT pff_game_id
		,nfl_player_id
	INTO #temp_games_players
	FROM #temp_all_snaps

-- Check if #temp_games_plays_players exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players') IS NOT NULL
	DROP TABLE #temp_games_plays_players

	SELECT py.pff_game_id
		,py.pff_play_id
		,py.game_clock_counting_up_pff
		,pl.nfl_player_id
	INTO #temp_games_plays_players
	FROM #temp_games_plays py
	INNER JOIN #temp_games_players pl
		ON py.pff_game_id = pl.pff_game_id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Now join the all snaps data to the games-plays-player table so you can note if
a player was in on a play or hurt on a play.  This is the table you can use to create
the currently_injured variable.

To do that, flag when a player gets an injury and then loop through to see if he 
came back in.  If not, then he is flagged as injured the rest of the game, if so
then he is flagged injured until he comes back in.

OUTPUT TABLE:
#temp_games_plays_players_injuries

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays_players_injuries exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players_injuries') IS NOT NULL
	DROP TABLE #temp_games_plays_players_injuries

	SELECT gpp.pff_game_id
		,gpp.pff_play_id
		,gpp.game_clock_counting_up_pff
		,gpp.nfl_player_id
		,CASE WHEN asn.nfl_player_id IS NOT NULL THEN 1 ELSE 0 END AS active_play
		,CASE WHEN asn.injured_on_play = 1 THEN 1 ELSE 0 END AS injured_on_play
		,po.season
		,po.team
		,po.position_game
	INTO #temp_games_plays_players_injuries
	FROM #temp_games_plays_players gpp
	LEFT JOIN #temp_all_snaps asn
		ON gpp.pff_game_id = asn.pff_game_id
		AND gpp.pff_play_id = asn.pff_play_id
		AND gpp.nfl_player_id = asn.nfl_player_id
	LEFT JOIN #temp_player_game_position po
		ON gpp.nfl_player_id = po.nfl_player_id
		AND gpp.pff_game_id = po.pff_game_id

DROP TABLE #temp_games_plays_players

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find a season position to fill in when game position is 'special teams'

OUTPUT TABLE:
#temp_season_position_o_d
#temp_season_position_rank
#temp_season_position

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_season_position_o_d exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_position_o_d') IS NOT NULL
	DROP TABLE #temp_season_position_o_d

	SELECT nfl_player_id
		,season
		,position_blt
		,snap_count_all
	INTO #temp_season_position_o_d
	FROM Analytics.dbo.analysis_players_season_position_defense
	WHERE defense_type = 'ALL'
		AND season_type_adjusted = 'REGPOST'

	INSERT INTO #temp_season_position_o_d
	SELECT nfl_player_id
		,season
		,position_blt
		,snap_count_all
	FROM Analytics.dbo.analysis_players_season_position_offense
	WHERE season_type_adjusted = 'REGPOST'


-- Check if #temp_season_position_rank exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_position_rank') IS NOT NULL
	DROP TABLE #temp_season_position_rank

	SELECT *
		,RANK() OVER (PARTITION BY nfl_player_id, season ORDER BY snap_count_all DESC, position_blt) AS position_rank
	INTO #temp_season_position_rank
	FROM #temp_season_position_o_d


-- Check if #temp_season_position exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_position') IS NOT NULL
	DROP TABLE #temp_season_position

	SELECT nfl_player_id
		,season
		,CASE WHEN position_blt IN ('LOT','ROT') THEN 'OT'
			WHEN position_blt IN ('LOG','ROG') THEN 'OG'			
			WHEN position_blt IN ('DT3T','NT') THEN 'DT'
			WHEN position_blt IN ('DE5T') THEN 'DE'
			WHEN position_blt IN ('MIKE','WILL','OB43') THEN 'IB'
			WHEN position_blt IN ('RUSH','SAM','OB34','DE43') THEN 'OB'
			WHEN position_blt IN ('NB') THEN 'CB'
			WHEN position_blt IN ('FS','SS') THEN 'DS'
			ELSE position_blt
		END AS position_blt
	INTO #temp_season_position
	FROM #temp_season_position_rank rk


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Replace any positions that are marked as special teams with their season position.
Or if that is missing, then their Bane position.

OUTPUT TABLE:
#temp_games_plays_players_injuries_pos

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays_players_injuries_pos exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players_injuries_pos') IS NOT NULL
	DROP TABLE #temp_games_plays_players_injuries_pos

	SELECT pff_game_id
		,pff_play_id
		,game_clock_counting_up_pff
		,gp.nfl_player_id
		,active_play
		,injured_on_play
		,gp.season
		,gp.team
		,CASE WHEN position_game = 'ST' THEN COALESCE(position_blt,pn.translation,position_game)
			ELSE position_game 
		END AS position_game
	INTO #temp_games_plays_players_injuries_pos
	FROM #temp_games_plays_players_injuries gp
	LEFT JOIN #temp_season_position po
		ON gp.nfl_player_id = po.nfl_player_id
		AND gp.season = po.season
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON gp.nfl_player_id = pl.nfl_id
		AND pl.is_deleted = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions pn
		ON pl.position_id = pn.id

DROP TABLE #temp_games_plays_players_injuries		

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

INSERT INTO Analytics.dbo.work_r_input_injury_loop
SELECT *
FROM #temp_games_plays_players_injuries_pos


RUN THE R PROGRAM
X:\R\pro_scouting\injury_loop

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

After running the r program to get available/not available for injury, join the
grades so you can count up the grades of WHO IS AVAILABLE each play excluding the target player.

OUTPUT TABLE:
#temp_currently_injured_with_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_currently_injured_with_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_currently_injured_with_grades') IS NOT NULL
	DROP TABLE #temp_currently_injured_with_grades

	SELECT ci.*
		,CASE WHEN pgc.grade_bucket < 5.7 THEN 5.7
			ELSE ISNULL(pgc.grade_bucket,5.7)
		END AS grade_bucket
	INTO #temp_currently_injured_with_grades
	FROM Analytics.dbo.r_output_play_player_currently_injured ci
	LEFT JOIN Analytics.dbo.analysis_players_pro_grades	pgc
		ON ci.nfl_player_id = pgc.nfl_player_id
		AND ci.season = pgc.report_season
		AND pgc.created_date = (SELECT MAX(created_date) FROM Analytics.dbo.analysis_players_pro_grades)

ALTER TABLE #temp_currently_injured_with_grades ADD grade_count_60 INT
ALTER TABLE #temp_currently_injured_with_grades ADD grade_count_60_up INT
ALTER TABLE #temp_currently_injured_with_grades ADD grade_count_63_up INT
		

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_grade_counts_60

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_60 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_60') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_60

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS grade_count_60
	INTO #temp_play_grade_counts_60
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.currently_injured = 0
		AND pg2.grade_bucket IN (6.0,6.1)
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.grade_count_60 = COALESCE(gc.grade_count_60,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_grade_counts_60 gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_grade_counts_60

	UPDATE #temp_currently_injured_with_grades
	SET grade_count_60 = 0
	WHERE grade_count_60 IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_grade_counts_60_up

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_60_up exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_60_up') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_60_up

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS grade_count_60_up
	INTO #temp_play_grade_counts_60_up
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.currently_injured = 0
		AND pg2.grade_bucket >= 6.0
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.grade_count_60_up = COALESCE(gc.grade_count_60_up,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_grade_counts_60_up gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_grade_counts_60_up

	UPDATE #temp_currently_injured_with_grades
	SET grade_count_60_up = 0
	WHERE grade_count_60_up IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_grade_counts_63_up

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_63_up exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_63_up') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_63_up

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS grade_count_63_up
	INTO #temp_play_grade_counts_63_up
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.currently_injured = 0
		AND pg2.grade_bucket >= 6.3
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.grade_count_63_up = COALESCE(gc.grade_count_63_up,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_grade_counts_63_up gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_grade_counts_63_up

	UPDATE #temp_currently_injured_with_grades
	SET grade_count_63_up = 0
	WHERE grade_count_63_up IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the grade counts from the previous step to the currently injured with grades table.

OUTPUT TABLE:
#temp_play_grade_counts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts') IS NOT NULL
	DROP TABLE #temp_play_grade_counts

	SELECT *
	INTO Analytics.dbo.work_player_play_grade_counts
	FROM #temp_currently_injured_with_grades pg

	DROP TABLE #temp_currently_injured_with_grades


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Filter it out so it is only players in their first 4 seasons in the data set and join 
in the player identifying info.

OUTPUT TABLE:
#temp_play_grade_counts_filtered

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_filtered exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_filtered') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_filtered

	SELECT gc.*
		,pl.draft_round
		,pl.legacy_grade
		,pl.nfl_entry_club_id_not_bane
		,pl.nfl_entry_year
		,pl.position AS draft_position
		,pl.on_53
		,gc.season - pl.nfl_entry_year + 1 AS season_in_league
	INTO #temp_play_grade_counts_filtered
	FROM Analytics.dbo.work_player_play_grade_counts gc
	INNER JOIN #temp_player_list pl
		ON gc.nfl_player_id = pl.nfl_player_id
	WHERE gc.season <= pl.nfl_entry_year + 3


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table of win probabaility by play.

OUTPUT TABLE:
#temp_win_prob

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_win_prob exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_win_prob') IS NOT NULL
	DROP TABLE #temp_win_prob

	SELECT DISTINCT pff_game_id
		,pff_play_id
		,team
		,win_pct_start
	INTO #temp_win_prob
	FROM #temp_all_snaps


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join back in the win probability column from the all snaps table

OUTPUT TABLE:
#temp_play_grade_counts_win_prob

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_win_prob exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_win_prob') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_win_prob

	SELECT gf.*
		,win_pct_start
	INTO #temp_play_grade_counts_win_prob
	FROM #temp_play_grade_counts_filtered gf
	INNER JOIN #temp_win_prob wp
		ON gf.pff_game_id = wp.pff_game_id
		AND gf.pff_play_id = wp.pff_play_id
		AND gf.team = wp.team

DROP TABLE #temp_play_grade_counts_filtered
DROP TABLE #temp_all_snaps


SELECT * 
FROM #temp_play_grade_counts_win_prob
WHERE nfl_player_id = 44828
--TRUNCATE TABLE Analytics.dbo.work_r_input_young_players_snap_pct
--INSERT INTO Analytics.dbo.work_r_input_young_players_snap_pct

--SELECT *
--FROM Analytics.dbo.work_r_output_young_players_snap_pct
