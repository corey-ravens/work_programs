

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

v3 adds the weighted average snap grade
	this didn't really work because when a rookie was a starter at a certain position (like Zach Orr at IB), 
	the grade was really high because then it only took CJ's snap pct.  It wasn't a trie measure of who the
	player had to play 'behind'.

v4 switched to a count of 6.3 and 6.0 and above players on the team at that position, EXCLUDING the given player.
v5 switches to doing the modeling at the PLAY level instead of the season level.
V6 IS A SLIGHT UPDATE TO V5. IF IT CHECKS OUT GO AHEAD AND RESET ITS NAME TO V5 AND OVERWIRTE THE OLD V5
v7 changes so it only counts the plays on a iven player's side of the ball
v8 adds healthy scratches in to the expected playtime model calculation.

need to add in team for the healthy scratch players. then either re-run injury loop or just append the rows 
from the input table to it, with 0 for currently injured.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if #temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions') IS NOT NULL
	DROP TABLE #temp_draft_board_positions

	SELECT player_id AS bane_player_id
		,CASE WHEN position_translation IN ('RUSH','SAM') THEN 'OB'
			WHEN position_translation IN ('FS','SS') THEN 'DS'
			ELSE position_translation
		END AS position
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-DEC' THEN 4
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DEC' THEN 5
			ELSE 999
	END AS order_by
	INTO #temp_draft_board_positions
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE position != '' 
		AND position IS NOT NULL
		AND player_id <> 64668
		AND position_translation NOT IN ('RS','ST')
		AND UPPER(LTRIM(RTRIM([type]))) <> 'media'


-- Check if #temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_with_order

	SELECT bane_player_id
		,position
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_position_order
	INTO #temp_draft_board_positions_with_order
	FROM #temp_draft_board_positions

/*
SELECT *
FROM #temp_draft_board_positions_with_order
*/

-- Check if #temp_draft_board_positions_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_latest

	SELECT *
	INTO #temp_draft_board_positions_latest
	FROM #temp_draft_board_positions_with_order
	WHERE draft_board_position_order = 1

/*
SELECT *
FROM #temp_draft_board_positions_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board grade. Take a players draft
board grade from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_grades_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades') IS NOT NULL
	DROP TABLE #temp_draft_board_grades

	SELECT player_id AS bane_player_id
		,gr.value AS board_grade
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-DEC' THEN 4
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DEC' THEN 5
			ELSE 999
		END AS order_by
	INTO #temp_draft_board_grades
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades] db
	LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
		ON db.grade_id = gr.id
	WHERE db.grade_id != ''
		AND db.grade_id IS NOT NULL
		AND player_id <> 64668
		AND position_translation NOT IN ('RS','ST')
		AND UPPER(LTRIM(RTRIM([type]))) <> 'media'


-- Check if #temp_draft_board_grades_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_with_order

	SELECT bane_player_id
		,board_grade
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_grade_order
	INTO #temp_draft_board_grades_with_order
	FROM #temp_draft_board_grades

/*
SELECT *
FROM #temp_draft_board_grades_with_order
*/

-- Check if #temp_draft_board_grades_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_latest

	SELECT *
	INTO #temp_draft_board_grades_latest
	FROM #temp_draft_board_grades_with_order
	WHERE draft_board_grade_order = 1

/*
SELECT *
FROM #temp_draft_board_grades_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a temp table with all players who have been on a 53 so you can have
a variable denoting whether a player ever made a 53. You may not want to count
these players against teams that get them.

OUTPUT TABLES:
#temp_player_on_53

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_on_53 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_on_53') IS NOT NULL
	DROP TABLE #temp_player_on_53

	SELECT DISTINCT nfl_player_id
		,1 AS on_53
	INTO #temp_player_on_53
	FROM AnalyticsDevelopment.dbo.analysis_players_gameweek_status
	WHERE status_roster_simple IN ('ACTIVE','INACTIVE')
		AND season_type IN ('REG','POST')


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the draft board position and player identifying information.

You can join this to the play data to get snaps played by first and second year players.

OUTPUT TABLES:
#temp_player_list

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_list exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_list') IS NOT NULL
	DROP TABLE #temp_player_list

	SELECT nfl_id AS nfl_player_id
		,pl.id AS bane_player_id
		,CONCAT(last_name,', ',goes_by) AS player
		,nfl_entry_year
		,CASE WHEN draft_round IS NULL THEN 8 ELSE draft_round END AS draft_round
		,draft_number
		,cl.nfl_club_id AS nfl_entry_club_id_not_bane
		,CASE WHEN COALESCE(po.position,pos.translation) IN ('RUSH','SAM') THEN 'OB'
			WHEN COALESCE(po.position,pos.translation) IN ('FS','SS') THEN 'DS'
			WHEN COALESCE(po.position,pos.translation) IN ('OH') THEN 'RB'
			WHEN COALESCE(po.position,pos.translation) IN ('DC','NB') THEN 'CB'
			WHEN COALESCE(po.position,pos.translation) IN ('WO') THEN 'WR'
			ELSE COALESCE(po.position,pos.translation)
		END AS position
		,pos.team AS side_of_ball
		,board_grade	
		,COALESCE(on_53,0) AS on_53
	INTO #temp_player_list
	FROM BaneProductionAnalytics.dbo.players pl
	LEFT JOIN #temp_draft_board_positions_latest po
		ON pl.id = po.bane_player_id
	LEFT JOIN #temp_draft_board_grades_latest gr
		ON pl.id = gr.bane_player_id
	LEFT JOIN BaneProductionAnalytics.dbo.clubs cl
		ON pl.nfl_entry_club_id = cl.id
		--AND cl.is_disabled = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions pos
		ON pl.position_id = pos.id
	LEFT JOIN #temp_player_on_53 o53
		ON pl.nfl_id = o53.nfl_player_id
	WHERE pl.is_deleted = 0
		AND pl.draft_year >= 2005
		AND ABS(pl.draft_year - pl.nfl_entry_year) < 10
		AND pl.nfl_id IS NOT NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table of all snaps since 2013.

OUTPUT TABLES:
#temp_all_snaps

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_all_snaps exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_all_snaps') IS NOT NULL
	DROP TABLE #temp_all_snaps

	SELECT sp.pff_GSISPLAYERID AS nfl_player_id
		,sp.pff_PLAYID AS pff_play_id
		,sp.pff_GAMEID AS pff_game_id
		,pl.pff_SORTORDER AS pff_sort_order
		,an.season
		,[week]
		,CASE WHEN pff_TEAM = 'SL' THEN 'LA'
			WHEN pff_TEAM = 'SD' THEN 'LAC'
			ELSE pff_TEAM
		END AS team
		,'special teams' AS side_of_ball
		,CASE WHEN pff_POSITION = 'P' THEN 'PT  '	
			WHEN pff_POSITION = 'H' THEN 'HO  ' 
			ELSE CONCAT(LEFT(pff_position,2),'  ') 
		END AS position_play
		,CASE WHEN LTRIM(RTRIM(UPPER(sp.pff_INJURED))) = 'Y' THEN 1 ELSE 0 END AS injured_on_play
		,co.game_clock_counting_up_pff
	INTO #temp_all_snaps
	FROM PFF.dbo.PFFSpecial sp
	INNER JOIN AnalyticsDevelopment.dbo.stage_plays_play_ancillary an
		ON sp.pff_PLAYID = an.pff_play_id
	INNER JOIN AnalyticsDevelopment.dbo.stage_plays_play_context co
		ON sp.pff_PLAYID = co.pff_play_id
	INNER JOIN Pff.dbo.PffPlays pl
		ON sp.pff_PLAYID = pl.pff_PLAYID
	WHERE an.season >= 2013
		AND an.season_type = 'PRE'
		AND sp.pff_GSISPLAYERID <> 0


	INSERT INTO #temp_all_snaps
	SELECT nfl_player_id
		,da.pff_play_id
		,pff_game_id
		,pl.pff_SORTORDER AS pff_sort_order
		,an.season
		,[week]
		,CASE WHEN team = 'SL' THEN 'LA'
			WHEN team = 'SD' THEN 'LAC'
			ELSE team
		END AS team
		,'defense' AS side_of_ball	
		,CASE WHEN pff_game_id = 14884 AND nfl_player_id = 0 THEN 'WILL' ELSE position_blt END AS position_play
		,injured_on_play_pff
		,co.game_clock_counting_up_pff
	FROM AnalyticsDevelopment.dbo.stage_plays_player_defensive_alignment da
	INNER JOIN AnalyticsDevelopment.dbo.stage_plays_play_ancillary an
		ON da.pff_play_id = an.pff_play_id
	INNER JOIN AnalyticsDevelopment.dbo.stage_plays_play_context co
		ON da.pff_play_id = co.pff_play_id
	INNER JOIN Pff.dbo.PffPlays pl
		ON da.pff_play_id = pl.pff_PLAYID
	WHERE an.season >= 2013
		AND an.season_type = 'PRE'
		AND nfl_player_id <> 0


	INSERT INTO #temp_all_snaps
	SELECT nfl_player_id
		,oa.pff_play_id
		,pff_game_id
		,pl.pff_SORTORDER AS pff_sort_order
		,an.season
		,[week]
		,CASE WHEN team = 'SL' THEN 'LA'
			WHEN team = 'SD' THEN 'LAC'
			ELSE team
		END AS team
		,'offense' AS side_of_ball
		,position_blt AS position_play
		,injured_on_play_pff
		,co.game_clock_counting_up_pff
	FROM AnalyticsDevelopment.dbo.stage_plays_player_offensive_alignment oa
	INNER JOIN AnalyticsDevelopment.dbo.stage_plays_play_ancillary an
		ON oa.pff_play_id = an.pff_play_id
	INNER JOIN AnalyticsDevelopment.dbo.stage_plays_play_context co
		ON oa.pff_play_id = co.pff_play_id
	INNER JOIN Pff.dbo.PffPlays pl
		ON oa.pff_play_id = pl.pff_PLAYID
	WHERE an.season >= 2013
		AND an.season_type = 'PRE'
		AND nfl_player_id <> 0


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table of which team is on which side of ball on each play. This way you
can fill in side of ball for healthy scratches and who isn't in on a play.

OUTPUT TABLES:
#temp_team_side_of_ball

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_team_side_of_ball exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_team_side_of_ball') IS NOT NULL
	DROP TABLE #temp_team_side_of_ball

	SELECT DISTINCT pff_game_id
		,pff_play_id
		,team
		,side_of_ball
	INTO #temp_team_side_of_ball
	FROM #temp_all_snaps

	DELETE FROM #temp_team_side_of_ball
	WHERE pff_play_id = 684298
		AND team = 'HST'
		AND side_of_ball = 'offense'


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the snaps by position by game so you can get a player's game position.
It will be the one where he plays the most snaps.

OUTPUT TABLE:
#temp_player_position_snaps
#temp_player_position_snaps_ranks
#temp_player_game_position

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_position_snaps exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_position_snaps') IS NOT NULL
	DROP TABLE #temp_player_position_snaps

	SELECT nfl_player_id
		,pff_game_id
		,season
		,team
		,CASE WHEN position_play IN ('LT','RT') THEN 'OT'
			WHEN position_play IN ('LG','RG') THEN 'OG'			
			WHEN position_play IN ('DT3T','NT') THEN 'DT'
			WHEN position_play IN ('DE5T') THEN 'DE'
			WHEN position_play IN ('MIKE','WILL','OB43') THEN 'IB'
			WHEN position_play IN ('RUSH','SAM','OB34','DE43') THEN 'OB'
			WHEN position_play IN ('NB') THEN 'CB'
			WHEN position_play IN ('FS','SS') THEN 'DS'
			WHEN side_of_ball = 'special teams' THEN 'ST'
			ELSE position_play
		END AS position_game
		,SUM(CASE WHEN side_of_ball <> 'special teams' THEN 1 WHEN side_of_ball = 'special teams' THEN 0 ELSE NULL END) AS position_snaps
	INTO #temp_player_position_snaps
	FROM #temp_all_snaps
	WHERE nfl_player_id <> 0
	GROUP BY nfl_player_id
		,pff_game_id
		,season
		,team
		,CASE WHEN position_play IN ('LT','RT') THEN 'OT'
			WHEN position_play IN ('LG','RG') THEN 'OG'			
			WHEN position_play IN ('DT3T','NT') THEN 'DT'
			WHEN position_play IN ('DE5T') THEN 'DE'
			WHEN position_play IN ('MIKE','WILL','OB43') THEN 'IB'
			WHEN position_play IN ('RUSH','SAM','OB34','DE43') THEN 'OB'
			WHEN position_play IN ('NB') THEN 'CB'
			WHEN position_play IN ('FS','SS') THEN 'DS'
			WHEN side_of_ball = 'special teams' THEN 'ST'
			ELSE position_play
		END


-- Check if #temp_player_position_snaps_ranks exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_position_snaps_ranks') IS NOT NULL
	DROP TABLE #temp_player_position_snaps_ranks

	SELECT *
		,RANK() OVER (PARTITION BY nfl_player_id, pff_game_id ORDER BY position_snaps DESC, position_game) AS position_snaps_rank
	INTO #temp_player_position_snaps_ranks
	FROM #temp_player_position_snaps


-- Check if #temp_player_game_position exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_game_position') IS NOT NULL
	DROP TABLE #temp_player_game_position

	SELECT sr.nfl_player_id
		,pff_game_id
		,sr.season
		,team
		,CASE WHEN position_game = 'WR' AND position_blt = 'TE' THEN 'TE'
			ELSE position_game
		END AS position_game
	INTO #temp_player_game_position
	FROM #temp_player_position_snaps_ranks sr
	LEFT JOIN AnalyticsDevelopment.dbo.analysis_players_season_position_offense po
		ON po.nfl_player_id = sr.nfl_player_id
		AND po.season = sr.season
		AND po.season_type_adjusted = 'REGPOST'
	WHERE position_snaps_rank = 1


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

There are no healthy scratches for preseason because there is no injury report, so just finde players who didn't play any snaps so you can assume inactives.

OUTPUT TABLE:
#temp_assumed_inactive

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_assumed_inactive exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_assumed_inactive') IS NOT NULL
	DROP TABLE #temp_assumed_inactive

	SELECT nfl_player_id
		,pff_game_id
		,1 AS inactive_game
		,cl.code AS team
		,pt.season
	INTO #temp_assumed_inactive
	FROM AnalyticsDevelopment.dbo.stage_players_game_playtime pt
	INNER JOIN AnalyticsDevelopment.dbo.stage_games_pff pf
		ON pt.nfl_game_key = pf.nfl_game_key
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON pt.nfl_club_id = cl.nfl_club_id
		AND cl.is_disabled = 0
	WHERE pt.season >= 2013
		AND pt.season_type = 'PRE'
		AND snap_count_all = 0
		AND depth_position IS NOT NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

You need a table that has a row for every play in a game for every player who was in that game.

First create a table with games and plays. Then create a table with games and players.
Join them and you should have a row for every player for each play in a game he played in (whether
he was in on the play or not).

OUTPUT TABLES:
#temp_games_plays
#temp_games_players
#temp_games_plays_players

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays') IS NOT NULL
	DROP TABLE #temp_games_plays

	SELECT DISTINCT pff_game_id
		,pff_play_id
		,pff_sort_order
		,game_clock_counting_up_pff
	INTO #temp_games_plays
	FROM #temp_all_snaps

-- Check if #temp_games_players exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_players') IS NOT NULL
	DROP TABLE #temp_games_players

	SELECT DISTINCT pff_game_id
		,nfl_player_id
		,0 AS inactive_game
	INTO #temp_games_players
	FROM #temp_all_snaps
	WHERE CONCAT(pff_game_id,'_',nfl_player_id) NOT IN (SELECT DISTINCT CONCAT(pff_game_id,'_',nfl_player_id) FROM #temp_assumed_inactive)

	INSERT INTO #temp_games_players
	SELECT pff_game_id
		,nfl_player_id
		,inactive_game
	FROM #temp_assumed_inactive


-- Check if #temp_games_plays_players exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players') IS NOT NULL
	DROP TABLE #temp_games_plays_players

	SELECT py.pff_game_id
		,py.pff_play_id
		,pff_sort_order
		,py.game_clock_counting_up_pff
		,pl.nfl_player_id
		,inactive_game
	INTO #temp_games_plays_players
	FROM #temp_games_plays py
	INNER JOIN #temp_games_players pl
		ON py.pff_game_id = pl.pff_game_id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Now join the all snaps data to the games-plays-player table so you can note if
a player was in on a play or hurt on a play.  This is the table you can use to create
the currently_injured variable.

To do that, flag when a player gets an injury and then loop through to see if he 
came back in.  If not, then he is flagged as injured the rest of the game, if so
then he is flagged injured until he comes back in.


OUTPUT TABLE:
#temp_games_plays_players_injuries

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays_players_injuries exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players_injuries') IS NOT NULL
	DROP TABLE #temp_games_plays_players_injuries

	SELECT gpp.pff_game_id
		,gpp.pff_play_id
		,gpp.pff_sort_order
		,gpp.game_clock_counting_up_pff
		,gpp.nfl_player_id
		,CASE WHEN asn.nfl_player_id IS NOT NULL THEN 1 ELSE 0 END AS active_play
		,CASE WHEN asn.injured_on_play = 1 THEN 1 ELSE 0 END AS injured_on_play
		,COALESCE(po.season,ai.season) AS season
		,COALESCE(po.team,ai.team) AS team
		,po.position_game
		,asn.side_of_ball
		,gpp.inactive_game
	INTO #temp_games_plays_players_injuries
	FROM #temp_games_plays_players gpp
	LEFT JOIN #temp_all_snaps asn
		ON gpp.pff_game_id = asn.pff_game_id
		AND gpp.pff_play_id = asn.pff_play_id
		AND gpp.nfl_player_id = asn.nfl_player_id
	LEFT JOIN #temp_player_game_position po
		ON gpp.nfl_player_id = po.nfl_player_id
		AND gpp.pff_game_id = po.pff_game_id
	LEFT JOIN #temp_assumed_inactive ai
		ON gpp.nfl_player_id = ai.nfl_player_id
		AND gpp.pff_game_id = ai.pff_game_id

DROP TABLE #temp_games_plays_players

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find a season position to fill in when game position is 'special teams'

OUTPUT TABLE:
#temp_season_position_o_d
#temp_season_position_rank
#temp_season_position

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_season_position_o_d exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_position_o_d') IS NOT NULL
	DROP TABLE #temp_season_position_o_d

	SELECT nfl_player_id
		,season
		,position_blt
		,snap_count_all
	INTO #temp_season_position_o_d
	FROM AnalyticsDevelopment.dbo.analysis_players_season_position_defense
	WHERE defense_type = 'ALL'
		AND season_type_adjusted = 'PRE'

	INSERT INTO #temp_season_position_o_d
	SELECT nfl_player_id
		,season
		,position_blt
		,snap_count_all
	FROM AnalyticsDevelopment.dbo.analysis_players_season_position_offense
	WHERE season_type_adjusted = 'PRE'


-- Check if #temp_season_position_rank exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_position_rank') IS NOT NULL
	DROP TABLE #temp_season_position_rank

	SELECT *
		,RANK() OVER (PARTITION BY nfl_player_id, season ORDER BY snap_count_all DESC, position_blt) AS position_rank
	INTO #temp_season_position_rank
	FROM #temp_season_position_o_d


-- Check if #temp_season_position exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_position') IS NOT NULL
	DROP TABLE #temp_season_position

	SELECT nfl_player_id
		,season
		,CASE WHEN position_blt IN ('LOT','ROT') THEN 'OT'
			WHEN position_blt IN ('LOG','ROG') THEN 'OG'			
			WHEN position_blt IN ('DT3T','NT') THEN 'DT'
			WHEN position_blt IN ('DE5T') THEN 'DE'
			WHEN position_blt IN ('MIKE','WILL','OB43') THEN 'IB'
			WHEN position_blt IN ('RUSH','SAM','OB34','DE43') THEN 'OB'
			WHEN position_blt IN ('NB') THEN 'CB'
			WHEN position_blt IN ('FS','SS') THEN 'DS'
			ELSE position_blt
		END AS position_blt
	INTO #temp_season_position
	FROM #temp_season_position_rank rk


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Replace any positions that are marked as special teams with their season position.
Or if that is missing, then their Bane position.

OUTPUT TABLE:
#temp_games_plays_players_injuries_pos

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games_plays_players_injuries_pos exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games_plays_players_injuries_pos') IS NOT NULL
	DROP TABLE #temp_games_plays_players_injuries_pos

	SELECT gp.pff_game_id
		,gp.pff_play_id
		,game_clock_counting_up_pff
		,gp.nfl_player_id
		,active_play
		,injured_on_play
		,gp.season
		,gp.team
		,CASE WHEN position_game = 'ST' OR inactive_game = 1 THEN COALESCE(position_blt,CASE WHEN pn.translation = 'DC' THEN 'CB' ELSE pn.translation END,position_game)
			ELSE position_game 
		END AS position_game
		,COALESCE(gp.side_of_ball,sb.side_of_ball) AS side_of_ball
		,inactive_game
		,gp.pff_sort_order
	INTO #temp_games_plays_players_injuries_pos
	FROM #temp_games_plays_players_injuries gp
	LEFT JOIN #temp_season_position po
		ON gp.nfl_player_id = po.nfl_player_id
		AND gp.season = po.season
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON gp.nfl_player_id = pl.nfl_id
		AND pl.is_deleted = 0
	LEFT JOIN BaneProductionAnalytics.dbo.positions pn
		ON pl.position_id = pn.id
	INNER JOIN #temp_team_side_of_ball sb
		ON gp.pff_game_id = sb.pff_game_id
		AND gp.pff_play_id = sb.pff_play_id
		AND (CASE WHEN gp.team = 'SD' THEN 'LAC' WHEN gp.team = 'SL' THEN 'LA' ELSE gp.team END) = (CASE WHEN sb.team = 'SD' THEN 'LAC' WHEN sb.team = 'SL' THEN 'LA' ELSE sb.team END)


DROP TABLE #temp_games_plays_players_injuries		

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

TRUNCATE TABLE AnalyticsDevelopment.dbo.work_r_input_injury_loop_preseason
INSERT INTO AnalyticsDevelopment.dbo.work_r_input_injury_loop_preseason
SELECT *
FROM #temp_games_plays_players_injuries_pos

/*
INSERT INTO AnalyticsDevelopment.dbo.r_output_play_player_currently_injured_preseason
SELECT pff_game_id
	,pff_play_id
	,game_clock_counting_up_pff
	,nfl_player_id
	,active_play
	,injured_on_play
	,season
	,team
	,position_game
	,0 AS currently_injured
FROM #temp_games_plays_players_injuries_pos
WHERE inactive_game = 1
*/


RUN THE R PROGRAM
X:\R\pro_scouting\young_players_playtime\injury_loop

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find out a player's last play in a game. Anything after that we will count as "assumed" unavailable.

OUTPUT TABLE:
#temp_player_last_play

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_player_last_play_append exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_last_play_append') IS NOT NULL
	DROP TABLE #temp_player_last_play_append

	SELECT pl.pff_GAMEID AS pff_game_id
		,pff_GSISPLAYERID AS nfl_player_id
		,MAX(pff_SORTORDER) AS last_play_sort_order
	INTO #temp_player_last_play_append
	FROM Pff.dbo.PffPlays pl
	INNER JOIN Pff.dbo.PFFDefense de
		ON pl.pff_PLAYID = de.pff_PLAYID
	WHERE pff_GAMESEASON >= 2012
		AND pff_WEEK LIKE 'P%'
	GROUP BY pl.pff_GAMEID
		,pff_GSISPLAYERID


	INSERT INTO #temp_player_last_play_append
	SELECT pl.pff_GAMEID AS pff_game_id
		,pff_GSISPLAYERID AS nfl_player_id
		,MAX(pff_SORTORDER) AS last_play_sort_order
	FROM Pff.dbo.PffPlays pl
	INNER JOIN Pff.dbo.PFFOffense de
		ON pl.pff_PLAYID = de.pff_PLAYID
	WHERE pff_GAMESEASON >= 2012
		AND pff_WEEK LIKE 'P%'
	GROUP BY pl.pff_GAMEID
		,pff_GSISPLAYERID


	INSERT INTO #temp_player_last_play_append
	SELECT pl.pff_GAMEID AS pff_game_id
		,pff_GSISPLAYERID AS nfl_player_id
		,MAX(pff_SORTORDER) AS last_play_sort_order
	FROM Pff.dbo.PffPlays pl
	INNER JOIN Pff.dbo.PFFSpecial de
		ON pl.pff_PLAYID = de.pff_PLAYID
	WHERE pff_GAMESEASON >= 2012
		AND pff_WEEK LIKE 'P%'
	GROUP BY pl.pff_GAMEID
		,pff_GSISPLAYERID


-- Check if #temp_player_last_play exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_player_last_play') IS NOT NULL
	DROP TABLE #temp_player_last_play

	SELECT pff_game_id
		,nfl_player_id
		,MAX(last_play_sort_order) AS last_play_sort_order
	INTO #temp_player_last_play
	FROM #temp_player_last_play_append
	GROUP BY pff_game_id
		,nfl_player_id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the last play to the injury looped data.  So you can do assumed or injured inactive for every play.

OUTPUT TABLE:
#temp_available_on_play

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_available_on_play exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_available_on_play') IS NOT NULL
	DROP TABLE #temp_available_on_play

	SELECT ij.pff_game_id
		,pff_play_id
		,game_clock_counting_up_pff
		,ij.nfl_player_id
		,active_play
		,season
		,team
		,position_game
		,side_of_ball
		,CASE WHEN currently_injured = 1 OR inactive_game = 1 OR pff_sort_order > ISNULL(last_play_sort_order ,99999) THEN 1 ELSE 0 END AS unavailable_play
	INTO #temp_available_on_play
	FROM AnalyticsDevelopment.dbo.r_output_play_player_currently_injured_preseason ij
	LEFT JOIN #temp_player_last_play lp
		ON ij.pff_game_id = lp.pff_game_id
		AND ij.nfl_player_id = lp.nfl_player_id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the depth chart data to the all snaps data

TEMP TABLES :
#temp_available_on_play_with_depth

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_players_game_playtime exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_players_game_playtime') IS NOT NULL
	DROP TABLE #temp_players_game_playtime

	SELECT pt.*
		,pff_game_id
	INTO #temp_players_game_playtime
	FROM AnalyticsDevelopment.dbo.stage_players_game_playtime pt
	LEFT JOIN AnalyticsDevelopment.dbo.stage_games_pff ga
		ON pt.nfl_game_key = ga.nfl_game_key

-- Check if #temp_available_on_play_with_depth exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_available_on_play_with_depth') IS NOT NULL
	DROP TABLE #temp_available_on_play_with_depth

	SELECT ap.*
		,pt.depth_number
		,CASE WHEN pt.depth_position = 'DB' THEN CASE WHEN position_game IN ('CB','FS','SS') THEN position_game ELSE 'CB' END
			WHEN pt.depth_position = 'LB' THEN CASE WHEN position_game IN ('OB','IB') THEN position_game ELSE 'IB' END
			ELSE pt.depth_position
		END AS depth_position
		,pt.depth_position_group
		,pt.depth_position_unit
	INTO #temp_available_on_play_with_depth
	FROM #temp_available_on_play ap
	LEFT JOIN #temp_players_game_playtime pt
		ON ap.pff_game_id = pt.pff_game_id
		AND ap.nfl_player_id = pt.nfl_player_id
	WHERE pt.depth_number IS NOT NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the grades so you can count up the grades of WHO IS AVAILABLE each play excluding the target player.

OUTPUT TABLE:
#temp_currently_injured_with_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_currently_injured_with_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_currently_injured_with_grades') IS NOT NULL
	DROP TABLE #temp_currently_injured_with_grades

	SELECT ci.*
		,CASE WHEN pgc.grade_bucket < 5.7 THEN 5.7
			ELSE ISNULL(pgc.grade_bucket,5.7)
		END AS grade_bucket
	INTO #temp_currently_injured_with_grades
	FROM #temp_available_on_play_with_depth ci
	LEFT JOIN AnalyticsDevelopment.dbo.analysis_players_pro_grades	pgc
		ON ci.nfl_player_id = pgc.nfl_player_id
		AND ci.season = pgc.report_season + 1
		AND pgc.created_date = (SELECT MAX(created_date) FROM AnalyticsDevelopment.dbo.analysis_players_pro_grades)
	WHERE ci.season >= 2012

ALTER TABLE #temp_currently_injured_with_grades ADD grade_count_60 INT
ALTER TABLE #temp_currently_injured_with_grades ADD grade_count_60_up INT
ALTER TABLE #temp_currently_injured_with_grades ADD grade_count_63_up INT
ALTER TABLE #temp_currently_injured_with_grades ADD player_pos_count INT
ALTER TABLE #temp_currently_injured_with_grades ADD depth_count_1 INT
ALTER TABLE #temp_currently_injured_with_grades ADD depth_count_2 INT
ALTER TABLE #temp_currently_injured_with_grades ADD depth_count_above INT
		

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_grade_counts_60

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_60 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_60') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_60

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS grade_count_60
	INTO #temp_play_grade_counts_60
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
		AND pg2.grade_bucket IN (6.0,6.1)
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.grade_count_60 = COALESCE(gc.grade_count_60,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_grade_counts_60 gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_grade_counts_60

	UPDATE #temp_currently_injured_with_grades
	SET grade_count_60 = 0
	WHERE grade_count_60 IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_grade_counts_60_up

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_60_up exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_60_up') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_60_up

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS grade_count_60_up
	INTO #temp_play_grade_counts_60_up
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
		AND pg2.grade_bucket >= 6.0
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.grade_count_60_up = COALESCE(gc.grade_count_60_up,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_grade_counts_60_up gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_grade_counts_60_up

	UPDATE #temp_currently_injured_with_grades
	SET grade_count_60_up = 0
	WHERE grade_count_60_up IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at 6.0 and 6.3 by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_grade_counts_63_up

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_63_up exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_63_up') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_63_up

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS grade_count_63_up
	INTO #temp_play_grade_counts_63_up
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
		AND pg2.grade_bucket >= 6.3
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.grade_count_63_up = COALESCE(gc.grade_count_63_up,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_grade_counts_63_up gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_grade_counts_63_up

	UPDATE #temp_currently_injured_with_grades
	SET grade_count_63_up = 0
	WHERE grade_count_63_up IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players by team and position for each play, excluding the target player.
You do a few of these separately to speed up processing.  Join the data to the main table right away so
you can drop the temp table.

DROPPED TABLE:
#temp_play_position_counts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_position_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_position_counts') IS NOT NULL
	DROP TABLE #temp_play_position_counts

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS player_pos_count
	INTO #temp_play_position_counts
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.position_game = pg2.position_game
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.player_pos_count = COALESCE(gc.player_pos_count,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_position_counts gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_position_counts

	UPDATE #temp_currently_injured_with_grades
	SET player_pos_count = 0
	WHERE player_pos_count IS NULL
	

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at number 1 on the depth chart at his position.

DROPPED TABLE:
#temp_play_depth_counts_1

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_depth_counts_1 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_depth_counts_1') IS NOT NULL
	DROP TABLE #temp_play_depth_counts_1

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS depth_count_1
	INTO #temp_play_depth_counts_1
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.depth_position = pg2.depth_position
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
		AND pg2.depth_number = 1
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.depth_count_1 = COALESCE(gc.depth_count_1,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_depth_counts_1 gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_depth_counts_1

	UPDATE #temp_currently_injured_with_grades
	SET depth_count_1 = 0
	WHERE depth_count_1 IS NULL



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players at number 2 on the depth chart at his position.

DROPPED TABLE:
#temp_play_depth_counts_2

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_depth_counts_2 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_depth_counts_2') IS NOT NULL
	DROP TABLE #temp_play_depth_counts_2

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS depth_count_2
	INTO #temp_play_depth_counts_2
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.depth_position = pg2.depth_position
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
		AND pg2.depth_number <= 2
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.depth_count_2 = COALESCE(gc.depth_count_2,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_depth_counts_2 gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_depth_counts_2

	UPDATE #temp_currently_injured_with_grades
	SET depth_count_2 = 0
	WHERE depth_count_2 IS NULL



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count up the number of players above given player on the depth chart at his position.

DROPPED TABLE:
#temp_play_depth_counts_above

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_depth_counts_above exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_depth_counts_above') IS NOT NULL
	DROP TABLE #temp_play_depth_counts_above

	SELECT pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id
		,COUNT(pg2.nfl_player_id) AS depth_count_above
	INTO #temp_play_depth_counts_above
	FROM #temp_currently_injured_with_grades pg 
	INNER JOIN #temp_currently_injured_with_grades pg2 
		ON pg.pff_game_id = pg2.pff_game_id 
		AND pg.pff_play_id = pg2.pff_play_id
		AND pg.team = pg2.team 
		AND pg.depth_position = pg2.depth_position
		AND pg.nfl_player_id <> pg2.nfl_player_id 
		AND pg2.unavailable_play = 0
		--AND pg2.inactive_game = 0
		AND pg2.depth_number < pg.depth_number
	GROUP BY pg.nfl_player_id
		,pg.pff_game_id
		,pg.pff_play_id

	UPDATE ci
	SET ci.depth_count_above = COALESCE(gc.depth_count_above,0)
	FROM #temp_currently_injured_with_grades ci 
	INNER JOIN #temp_play_depth_counts_above gc
		ON ci.nfl_player_id = gc.nfl_player_id
		AND ci.pff_game_id = gc.pff_game_id
		AND ci.pff_play_id = gc.pff_play_id

	DROP TABLE #temp_play_depth_counts_above

	UPDATE #temp_currently_injured_with_grades
	SET depth_count_above = 0
	WHERE depth_count_above IS NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the grade counts from the previous step to the currently injured with grades table.

OUTPUT TABLE:
Analytics.dbo.work_player_play_grade_counts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	--TRUNCATE TABLE AnalyticsDevelopment.dbo.work_player_play_grade_counts_preseason
	--INSERT INTO AnalyticsDevelopment.dbo.work_player_play_grade_counts_preseason
	SELECT * 
	FROM #temp_currently_injured_with_grades

	DROP TABLE #temp_currently_injured_with_grades


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join in the player identifying info. This INNER JOIN based on side of ball gets rid of all the extra game rows for the side of the ball the player doesn't play.
For example, all the "defense" and "special teams" rows for a QB like Aaron Rodgers.

OUTPUT TABLE:
#temp_play_grade_counts_filtered

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_grade_counts_filtered exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_grade_counts_filtered') IS NOT NULL
	DROP TABLE #temp_play_grade_counts_filtered

	SELECT gc.*
		,pl.draft_round
		,ISNULL(pl.board_grade,5.6) AS board_grade
		,pl.nfl_entry_club_id_not_bane
		,pl.nfl_entry_year
		,pl.position AS draft_position
		,pl.on_53
		,gc.season - pl.nfl_entry_year + 1 AS season_in_league
	INTO #temp_play_grade_counts_filtered
	FROM AnalyticsDevelopment.dbo.work_player_play_grade_counts_preseason gc
	INNER JOIN #temp_player_list pl
		ON gc.nfl_player_id = pl.nfl_player_id
		AND gc.side_of_ball = pl.side_of_ball

/*
SELECT *
FROM #temp_play_grade_counts_filtered
WHERE pff_game_id = 8178

select *
from pff.dbo.pffplays
where pff_GAMeseason = 2017
and pff_offteam = 'blt'
and pff_defteam = 'no'

SELECT *
FROM #temp_player_list
WHERE nfl_player_id = 29851
*/


TRUNCATE TABLE AnalyticsDevelopment.dbo.work_r_input_preseason_expected_snaps
INSERT INTO AnalyticsDevelopment.dbo.work_r_input_preseason_expected_snaps
SELECT * 
FROM #temp_play_grade_counts_filtered



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the play probability to the play data.

OUTPUT TABLE:
#temp_play_probability

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_play_probability exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_play_probability') IS NOT NULL
	DROP TABLE #temp_play_probability

	SELECT ri.*
		,ro.play_probability
	INTO #temp_play_probability
	FROM AnalyticsDevelopment.dbo.work_r_input_young_players_expected_snaps ri
	INNER JOIN AnalyticsDevelopment.dbo.work_r_output_young_players_expected_snaps ro
		ON ri.pff_game_id = ro.pff_game_id
		AND ri.pff_play_id = ro.pff_play_id
		AND ri.nfl_player_id = ro.nfl_player_id



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sum the actual minus expected play time by team.
You can also do it by situation, etc.

OUTPUT TABLE:
#temp_actual_expected

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_actual_expected exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_actual_expected') IS NOT NULL
	DROP TABLE #temp_actual_expected

	SELECT CASE WHEN team = 'SD' THEN 'LAC'
			WHEN team = 'SL' THEN 'LA'
			ELSE team
		END AS team
		,season
		,SUM(active_play) AS active_play
		,SUM(play_probability) AS play_probability
		,(SUM(active_play) / SUM(play_probability)) - 1 AS extra_playtime
	INTO #temp_actual_expected
	FROM #temp_play_probability
	WHERE currently_injured = 0
		AND draft_position <> 'QB'
		AND season_in_league IN (1,2,3)
	GROUP BY CASE WHEN team = 'SD' THEN 'LAC'
			WHEN team = 'SL' THEN 'LA'
			ELSE team
		END
		,season

		
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table with team season win percentage so you can check for correlation
between young player play time and win pct in that or the next year.

OUTPUT TABLE:
#temp_results
#temp_season_win_pct

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_results exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_results') IS NOT NULL
	DROP TABLE #temp_results

	SELECT pg.nfl_game_key
		,pg.season
		,cl.code AS TEAM
		,CASE WHEN home_team_score > away_team_score THEN 1
			WHEN home_team_score < away_team_score THEN 0
			WHEN home_team_score = away_team_score THEN 0.5
			ELSE NULL
		END AS result
	INTO #temp_results
	FROM BaneProductionAnalytics.dbo.pro_games pg
	INNER JOIN ProDB.dbo.Club nc
		ON pg.home_team_nfl_club_key = nc.ClubKey
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON nc.ClubID = cl.nfl_club_id
		AND cl.is_disabled = 0
	INNER JOIN [Analytics].[dbo].[stage_games_pff] pf
		ON pg.nfl_game_key = pf.nfl_game_key
	WHERE pg.season BETWEEN 2013 AND 2017
		AND UPPER(pg.season_type) = 'REG'

	INSERT INTO #temp_results
	SELECT pg.nfl_game_key
		,pg.season
		,cl.code AS team
		,CASE WHEN home_team_score < away_team_score THEN 1
			WHEN home_team_score > away_team_score THEN 0
			WHEN home_team_score = away_team_score THEN 0.5
			ELSE NULL
		END AS result
	FROM BaneProductionAnalytics.dbo.pro_games pg
	INNER JOIN ProDB.dbo.Club nc
		ON pg.away_team_nfl_club_key = nc.ClubKey
	INNER JOIN BaneProductionAnalytics.dbo.clubs cl
		ON nc.ClubID = cl.nfl_club_id
		AND cl.is_disabled = 0
	INNER JOIN [Analytics].[dbo].[stage_games_pff] pf
		ON pg.nfl_game_key = pf.nfl_game_key
	WHERE pg.season BETWEEN 2013 AND 2017
		AND UPPER(pg.season_type) = 'REG'

	
	SELECT season
		,team
		,AVG(result) AS win_pct
	INTO #temp_season_win_pct
	FROM #temp_results
	GROUP BY season
		,team
		
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Turn the win percentage totals into percentages. Then join to the actual and expected data

OUTPUT TABLE:


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

